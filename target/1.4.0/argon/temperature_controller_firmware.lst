
d:/Gilbert/Offline_Projects/temperature_controller_firmware/target/1.4.0/argon/temperature_controller_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000024f0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  000165a8  2**0
                  CONTENTS
  4 .data         0000006c  2003e438  000d6510  0000e438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000034c  2003e4a8  2003e4a8  0001e4a8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d657c  000d657c  0001657c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d65a4  000d65a4  000165a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ea51a  00000000  00000000  000165a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000124eb  00000000  00000000  00100ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fec2  00000000  00000000  00112fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002648  00000000  00000000  00132e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004798  00000000  00000000  001354b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036d3b  00000000  00000000  00139c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bf3d  00000000  00000000  0017098a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102460  00000000  00000000  0019c8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cfb0  00000000  00000000  0029ed28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 f853 	bl	d60dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 f858 	bl	d60f2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e438 	.word	0x2003e438
   d404c:	000d6510 	.word	0x000d6510
   d4050:	2003e4a4 	.word	0x2003e4a4
   d4054:	2003e4a8 	.word	0x2003e4a8
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f000 fe5b 	bl	d4d18 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d6508 	.word	0x000d6508
   d4084:	000d64c4 	.word	0x000d64c4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b872 	b.w	d4170 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 fa2d 	bl	d44ec <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 be0d 	b.w	d4cb4 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bc47 	b.w	d492c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc4d 	b.w	d493c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc4b 	b.w	d493c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d40b6:	f000 ba6d 	b.w	d4594 <HAL_Pin_Map>
	...

000d40bc <_Z11modeControl6String>:
    return 1;
}
*/


int modeControl(String command){
   d40bc:	b510      	push	{r4, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40be:	490e      	ldr	r1, [pc, #56]	; (d40f8 <_Z11modeControl6String+0x3c>)
   d40c0:	4604      	mov	r4, r0
   d40c2:	f000 fd29 	bl	d4b18 <_ZNK6String6equalsEPKc>
        if(command == "zero"){
   d40c6:	b108      	cbz	r0, d40cc <_Z11modeControl6String+0x10>
            mode = 0;
   d40c8:	2200      	movs	r2, #0
   d40ca:	e00e      	b.n	d40ea <_Z11modeControl6String+0x2e>
   d40cc:	490b      	ldr	r1, [pc, #44]	; (d40fc <_Z11modeControl6String+0x40>)
   d40ce:	4620      	mov	r0, r4
   d40d0:	f000 fd22 	bl	d4b18 <_ZNK6String6equalsEPKc>
            return 1;
        }
        else if(command == "one"){
   d40d4:	b118      	cbz	r0, d40de <_Z11modeControl6String+0x22>
            mode = 1;
   d40d6:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_Z11modeControl6String+0x44>)
   d40d8:	2001      	movs	r0, #1
   d40da:	6018      	str	r0, [r3, #0]
            return 1;
   d40dc:	bd10      	pop	{r4, pc}
   d40de:	4909      	ldr	r1, [pc, #36]	; (d4104 <_Z11modeControl6String+0x48>)
   d40e0:	4620      	mov	r0, r4
   d40e2:	f000 fd19 	bl	d4b18 <_ZNK6String6equalsEPKc>
        }
        else if(command == "two"){
   d40e6:	b120      	cbz	r0, d40f2 <_Z11modeControl6String+0x36>
            mode = 2;
   d40e8:	2202      	movs	r2, #2
   d40ea:	4b05      	ldr	r3, [pc, #20]	; (d4100 <_Z11modeControl6String+0x44>)
   d40ec:	601a      	str	r2, [r3, #0]
            return 1;
   d40ee:	2001      	movs	r0, #1
   d40f0:	bd10      	pop	{r4, pc}
        }
        else{
            return -1;
   d40f2:	f04f 30ff 	mov.w	r0, #4294967295
        }
}
   d40f6:	bd10      	pop	{r4, pc}
   d40f8:	000d618c 	.word	0x000d618c
   d40fc:	000d62dd 	.word	0x000d62dd
   d4100:	2003e4c0 	.word	0x2003e4c0
   d4104:	000d6191 	.word	0x000d6191

000d4108 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>:

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
   d4108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d410c:	4681      	mov	r9, r0
   d410e:	b094      	sub	sp, #80	; 0x50
   d4110:	4614      	mov	r4, r2
   d4112:	469a      	mov	sl, r3
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4114:	460d      	mov	r5, r1
   d4116:	b121      	cbz	r1, d4122 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1a>
   d4118:	4608      	mov	r0, r1
   d411a:	f002 f825 	bl	d6168 <strlen>
   d411e:	4607      	mov	r7, r0
   d4120:	e000      	b.n	d4124 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x1c>
   d4122:	460f      	mov	r7, r1
   d4124:	b124      	cbz	r4, d4130 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x28>
   d4126:	4620      	mov	r0, r4
   d4128:	f002 f81e 	bl	d6168 <strlen>
   d412c:	4606      	mov	r6, r0
   d412e:	e000      	b.n	d4132 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm+0x2a>
   d4130:	4626      	mov	r6, r4

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d4132:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d4136:	4642      	mov	r2, r8
   d4138:	2100      	movs	r1, #0
   d413a:	a801      	add	r0, sp, #4
   d413c:	f001 ffd9 	bl	d60f2 <memset>
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
   d4140:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d4142:	f88d 3019 	strb.w	r3, [sp, #25]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4146:	2300      	movs	r3, #0
   d4148:	aa01      	add	r2, sp, #4
   d414a:	4619      	mov	r1, r3
   d414c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d4150:	f8cd 8004 	str.w	r8, [sp, #4]
        creds.ssid = ssid;
   d4154:	9502      	str	r5, [sp, #8]
        creds.ssid_len = ssidLen;
   d4156:	9703      	str	r7, [sp, #12]
        creds.password = password;
   d4158:	9404      	str	r4, [sp, #16]
        creds.password_len = passwordLen;
   d415a:	9605      	str	r6, [sp, #20]
        creds.security = WLanSecurityType(security);
   d415c:	f88d a018 	strb.w	sl, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d4160:	f000 fbb4 	bl	d48cc <network_set_credentials>
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
    }
   d4164:	fab0 f080 	clz	r0, r0
   d4168:	0940      	lsrs	r0, r0, #5
   d416a:	b014      	add	sp, #80	; 0x50
   d416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4170 <setup>:
 int mode = 0;
 int val;
 int status = 0;
 int modeControl(String command);

void setup() {
   d4170:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bool setCredentials(const char *ssid) {
        return setCredentials(ssid, NULL, UNSEC);
    }

    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
   d4172:	4d27      	ldr	r5, [pc, #156]	; (d4210 <setup+0xa0>)
   d4174:	4a27      	ldr	r2, [pc, #156]	; (d4214 <setup+0xa4>)
   d4176:	4928      	ldr	r1, [pc, #160]	; (d4218 <setup+0xa8>)

  delay(500);

  //pin initialization
  pinMode(clkPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
   d4178:	4e28      	ldr	r6, [pc, #160]	; (d421c <setup+0xac>)
   d417a:	2400      	movs	r4, #0
   d417c:	9400      	str	r4, [sp, #0]
   d417e:	2303      	movs	r3, #3
   d4180:	4628      	mov	r0, r5
   d4182:	f7ff ffc1 	bl	d4108 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
   d4186:	9400      	str	r4, [sp, #0]
   d4188:	2303      	movs	r3, #3
   d418a:	4a25      	ldr	r2, [pc, #148]	; (d4220 <setup+0xb0>)
   d418c:	4925      	ldr	r1, [pc, #148]	; (d4224 <setup+0xb4>)
   d418e:	4628      	mov	r0, r5
   d4190:	f7ff ffba 	bl	d4108 <_ZN5spark9WiFiClass14setCredentialsEPKcS2_mm>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4194:	4623      	mov	r3, r4
   d4196:	2209      	movs	r2, #9
   d4198:	4923      	ldr	r1, [pc, #140]	; (d4228 <setup+0xb8>)
   d419a:	4824      	ldr	r0, [pc, #144]	; (d422c <setup+0xbc>)
  //display.display();

  delay(500);

  //pin initialization
  pinMode(clkPin, OUTPUT);
   d419c:	4d24      	ldr	r5, [pc, #144]	; (d4230 <setup+0xc0>)
   d419e:	f000 fbad 	bl	d48fc <spark_variable>
   d41a2:	4623      	mov	r3, r4
   d41a4:	2202      	movs	r2, #2
   d41a6:	4923      	ldr	r1, [pc, #140]	; (d4234 <setup+0xc4>)
   d41a8:	4823      	ldr	r0, [pc, #140]	; (d4238 <setup+0xc8>)
   d41aa:	f000 fba7 	bl	d48fc <spark_variable>
   d41ae:	4623      	mov	r3, r4
   d41b0:	2202      	movs	r2, #2
   d41b2:	4922      	ldr	r1, [pc, #136]	; (d423c <setup+0xcc>)
   d41b4:	4822      	ldr	r0, [pc, #136]	; (d4240 <setup+0xd0>)
   d41b6:	f000 fba1 	bl	d48fc <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d41ba:	4a22      	ldr	r2, [pc, #136]	; (d4244 <setup+0xd4>)
   d41bc:	4922      	ldr	r1, [pc, #136]	; (d4248 <setup+0xd8>)
   d41be:	4823      	ldr	r0, [pc, #140]	; (d424c <setup+0xdc>)
   d41c0:	f000 fdda 	bl	d4d78 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("stat", status);
  Particle.variable("mode", mode);
  
  Particle.function("modeC", modeControl);
  
  Serial.begin(9600);
   d41c4:	f000 fec4 	bl	d4f50 <_Z16_fetch_usbserialv>
   d41c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41cc:	f000 feb4 	bl	d4f38 <_ZN9USBSerial5beginEl>
  //display.setTextColor(WHITE);
  //display.setCursor(0,0);
  //display.print("Initialization...");
  //display.display();

  delay(500);
   d41d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41d4:	f000 fd30 	bl	d4c38 <delay>

  //pin initialization
  pinMode(clkPin, OUTPUT);
   d41d8:	8828      	ldrh	r0, [r5, #0]
   d41da:	2101      	movs	r1, #1
   d41dc:	f001 f974 	bl	d54c8 <pinMode>
  pinMode(dataPin, OUTPUT);
   d41e0:	8830      	ldrh	r0, [r6, #0]
   d41e2:	2101      	movs	r1, #1
   d41e4:	f001 f970 	bl	d54c8 <pinMode>
  digitalWrite(dataPin,HIGH);		//#dataPin = 1
   d41e8:	8830      	ldrh	r0, [r6, #0]
   d41ea:	2101      	movs	r1, #1
   d41ec:	f001 f97d 	bl	d54ea <digitalWrite>
  digitalWrite(clkPin,LOW);		//clkPin  = 0
   d41f0:	4621      	mov	r1, r4
   d41f2:	8828      	ldrh	r0, [r5, #0]
   d41f4:	f001 f979 	bl	d54ea <digitalWrite>

  pinMode(A4, INPUT);// button
   d41f8:	4621      	mov	r1, r4
   d41fa:	200f      	movs	r0, #15
   d41fc:	f001 f964 	bl	d54c8 <pinMode>
  pinMode(D7, OUTPUT);// led and relay switch
   d4200:	2101      	movs	r1, #1
   d4202:	2007      	movs	r0, #7
}
   d4204:	b002      	add	sp, #8
   d4206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  pinMode(dataPin, OUTPUT);
  digitalWrite(dataPin,HIGH);		//#dataPin = 1
  digitalWrite(clkPin,LOW);		//clkPin  = 0

  pinMode(A4, INPUT);// button
  pinMode(D7, OUTPUT);// led and relay switch
   d420a:	f001 b95d 	b.w	d54c8 <pinMode>
   d420e:	bf00      	nop
   d4210:	2003e708 	.word	0x2003e708
   d4214:	000d6195 	.word	0x000d6195
   d4218:	000d61a0 	.word	0x000d61a0
   d421c:	2003e438 	.word	0x2003e438
   d4220:	000d61ae 	.word	0x000d61ae
   d4224:	000d61bb 	.word	0x000d61bb
   d4228:	2003e4b0 	.word	0x2003e4b0
   d422c:	000d61c6 	.word	0x000d61c6
   d4230:	2003e4b8 	.word	0x2003e4b8
   d4234:	2003e4c8 	.word	0x2003e4c8
   d4238:	000d61cb 	.word	0x000d61cb
   d423c:	2003e4c0 	.word	0x2003e4c0
   d4240:	000d61d0 	.word	0x000d61d0
   d4244:	000d61d5 	.word	0x000d61d5
   d4248:	000d40bd 	.word	0x000d40bd
   d424c:	000d4d4d 	.word	0x000d4d4d

000d4250 <_Z10controlFanv>:
        }
}



void controlFan(){
   d4250:	b570      	push	{r4, r5, r6, lr}
	if(mode == 0){//off
   d4252:	4c1f      	ldr	r4, [pc, #124]	; (d42d0 <_Z10controlFanv+0x80>)
   d4254:	6825      	ldr	r5, [r4, #0]
   d4256:	b92d      	cbnz	r5, d4264 <_Z10controlFanv+0x14>
		digitalWrite(D7,0);
   d4258:	4629      	mov	r1, r5
   d425a:	2007      	movs	r0, #7
   d425c:	f001 f945 	bl	d54ea <digitalWrite>
		status = 0;
   d4260:	4b1c      	ldr	r3, [pc, #112]	; (d42d4 <_Z10controlFanv+0x84>)
   d4262:	601d      	str	r5, [r3, #0]
	}
	if(mode == 1){//on
   d4264:	6825      	ldr	r5, [r4, #0]
   d4266:	2d01      	cmp	r5, #1
   d4268:	d105      	bne.n	d4276 <_Z10controlFanv+0x26>
		digitalWrite(D7,1);
   d426a:	4629      	mov	r1, r5
   d426c:	2007      	movs	r0, #7
   d426e:	f001 f93c 	bl	d54ea <digitalWrite>
		status = 1;
   d4272:	4b18      	ldr	r3, [pc, #96]	; (d42d4 <_Z10controlFanv+0x84>)
   d4274:	601d      	str	r5, [r3, #0]
	}
	if(mode == 2){//auto
   d4276:	6823      	ldr	r3, [r4, #0]
   d4278:	2b02      	cmp	r3, #2
   d427a:	d128      	bne.n	d42ce <_Z10controlFanv+0x7e>
		if(abs(tempSetpoint - (int)temperature) >= 2){//if temp is off by 2 deg then
   d427c:	4d16      	ldr	r5, [pc, #88]	; (d42d8 <_Z10controlFanv+0x88>)
   d427e:	4c17      	ldr	r4, [pc, #92]	; (d42dc <_Z10controlFanv+0x8c>)
   d4280:	e9d5 0100 	ldrd	r0, r1, [r5]
   d4284:	f001 fef4 	bl	d6070 <__aeabi_d2iz>
   d4288:	6826      	ldr	r6, [r4, #0]
   d428a:	1a33      	subs	r3, r6, r0
   d428c:	2b00      	cmp	r3, #0
   d428e:	bfb8      	it	lt
   d4290:	425b      	neglt	r3, r3
   d4292:	2b01      	cmp	r3, #1
   d4294:	dd1b      	ble.n	d42ce <_Z10controlFanv+0x7e>
			if((int)temperature > tempSetpoint && status == 1){//if temp too high && fan on
   d4296:	4286      	cmp	r6, r0
   d4298:	da09      	bge.n	d42ae <_Z10controlFanv+0x5e>
   d429a:	4e0e      	ldr	r6, [pc, #56]	; (d42d4 <_Z10controlFanv+0x84>)
   d429c:	6833      	ldr	r3, [r6, #0]
   d429e:	2b01      	cmp	r3, #1
   d42a0:	d105      	bne.n	d42ae <_Z10controlFanv+0x5e>
				digitalWrite(D7,0);//turn off fan
   d42a2:	2100      	movs	r1, #0
   d42a4:	2007      	movs	r0, #7
   d42a6:	f001 f920 	bl	d54ea <digitalWrite>
				status = 0;
   d42aa:	2300      	movs	r3, #0
   d42ac:	6033      	str	r3, [r6, #0]
			}
			if((int)temperature < tempSetpoint && status == 0){//if temp too low && fan off
   d42ae:	e9d5 0100 	ldrd	r0, r1, [r5]
   d42b2:	f001 fedd 	bl	d6070 <__aeabi_d2iz>
   d42b6:	6823      	ldr	r3, [r4, #0]
   d42b8:	4298      	cmp	r0, r3
   d42ba:	da08      	bge.n	d42ce <_Z10controlFanv+0x7e>
   d42bc:	4c05      	ldr	r4, [pc, #20]	; (d42d4 <_Z10controlFanv+0x84>)
   d42be:	6823      	ldr	r3, [r4, #0]
   d42c0:	b92b      	cbnz	r3, d42ce <_Z10controlFanv+0x7e>
				digitalWrite(D7,1);//turn on fan
   d42c2:	2101      	movs	r1, #1
   d42c4:	2007      	movs	r0, #7
   d42c6:	f001 f910 	bl	d54ea <digitalWrite>
				status = 1;
   d42ca:	2301      	movs	r3, #1
   d42cc:	6023      	str	r3, [r4, #0]
   d42ce:	bd70      	pop	{r4, r5, r6, pc}
   d42d0:	2003e4c0 	.word	0x2003e4c0
   d42d4:	2003e4c8 	.word	0x2003e4c8
   d42d8:	2003e4b0 	.word	0x2003e4b0
   d42dc:	2003e4bc 	.word	0x2003e4bc

000d42e0 <_Z9myShiftIniii>:
}



int myShiftIn(int _dataPin, int _clockPin, int _numBits)// commands for reading/sending data to a SHTx sensor
{
   d42e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int ret = 0;
   d42e4:	2400      	movs	r4, #0
}



int myShiftIn(int _dataPin, int _clockPin, int _numBits)// commands for reading/sending data to a SHTx sensor
{
   d42e6:	4607      	mov	r7, r0
   d42e8:	4690      	mov	r8, r2
  int ret = 0;
  int i;

  for (i=0; i<_numBits; ++i)
   d42ea:	4625      	mov	r5, r4
  {
     digitalWrite(_clockPin, HIGH);
   d42ec:	b28e      	uxth	r6, r1
int myShiftIn(int _dataPin, int _clockPin, int _numBits)// commands for reading/sending data to a SHTx sensor
{
  int ret = 0;
  int i;

  for (i=0; i<_numBits; ++i)
   d42ee:	4545      	cmp	r5, r8
   d42f0:	da11      	bge.n	d4316 <_Z9myShiftIniii+0x36>
  {
     digitalWrite(_clockPin, HIGH);
   d42f2:	2101      	movs	r1, #1
   d42f4:	4630      	mov	r0, r6
   d42f6:	f001 f8f8 	bl	d54ea <digitalWrite>
     delay(10);  // I don't know why I need this, but without it I don't get my 8 lsb of temp
   d42fa:	200a      	movs	r0, #10
   d42fc:	f000 fc9c 	bl	d4c38 <delay>
     ret = ret*2 + digitalRead(_dataPin);
   d4300:	b2b8      	uxth	r0, r7
   d4302:	f001 f90b 	bl	d551c <digitalRead>
   d4306:	0064      	lsls	r4, r4, #1
   d4308:	4404      	add	r4, r0
     digitalWrite(_clockPin, LOW);
   d430a:	2100      	movs	r1, #0
   d430c:	4630      	mov	r0, r6
   d430e:	f001 f8ec 	bl	d54ea <digitalWrite>
int myShiftIn(int _dataPin, int _clockPin, int _numBits)// commands for reading/sending data to a SHTx sensor
{
  int ret = 0;
  int i;

  for (i=0; i<_numBits; ++i)
   d4312:	3501      	adds	r5, #1
   d4314:	e7eb      	b.n	d42ee <_Z9myShiftIniii+0xe>
     ret = ret*2 + digitalRead(_dataPin);
     digitalWrite(_clockPin, LOW);
  }

  return(ret);
}
   d4316:	4620      	mov	r0, r4
   d4318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d431c <_Z14sendCommandSHTiii>:


void sendCommandSHT(int _command, int _dataPin, int _clockPin)// send a command to the SHTx sensor
{
   d431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4320:	4617      	mov	r7, r2
  int ack;

  // Transmission Start
  pinMode(_dataPin, OUTPUT);
   d4322:	b28c      	uxth	r4, r1
  pinMode(_clockPin, OUTPUT);
   d4324:	b2bd      	uxth	r5, r7
  return(ret);
}


void sendCommandSHT(int _command, int _dataPin, int _clockPin)// send a command to the SHTx sensor
{
   d4326:	4680      	mov	r8, r0
   d4328:	460e      	mov	r6, r1
  int ack;

  // Transmission Start
  pinMode(_dataPin, OUTPUT);
   d432a:	4620      	mov	r0, r4
   d432c:	2101      	movs	r1, #1
   d432e:	f001 f8cb 	bl	d54c8 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d4332:	4628      	mov	r0, r5
   d4334:	2101      	movs	r1, #1
   d4336:	f001 f8c7 	bl	d54c8 <pinMode>
  digitalWrite(_dataPin, HIGH);
   d433a:	4620      	mov	r0, r4
   d433c:	2101      	movs	r1, #1
   d433e:	f001 f8d4 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d4342:	4628      	mov	r0, r5
   d4344:	2101      	movs	r1, #1
   d4346:	f001 f8d0 	bl	d54ea <digitalWrite>
  digitalWrite(_dataPin, LOW);
   d434a:	4620      	mov	r0, r4
   d434c:	2100      	movs	r1, #0
   d434e:	f001 f8cc 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d4352:	4628      	mov	r0, r5
   d4354:	2100      	movs	r1, #0
   d4356:	f001 f8c8 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d435a:	4628      	mov	r0, r5
   d435c:	2101      	movs	r1, #1
   d435e:	f001 f8c4 	bl	d54ea <digitalWrite>
  digitalWrite(_dataPin, HIGH);
   d4362:	4620      	mov	r0, r4
   d4364:	2101      	movs	r1, #1
   d4366:	f001 f8c0 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d436a:	4628      	mov	r0, r5
   d436c:	2100      	movs	r1, #0
   d436e:	f001 f8bc 	bl	d54ea <digitalWrite>

  // The command (3 msb are address and must be 000, and last 5 bits are command)
  shiftOut(_dataPin, _clockPin, MSBFIRST, _command);
   d4372:	fa5f f388 	uxtb.w	r3, r8
   d4376:	2201      	movs	r2, #1
   d4378:	b2f9      	uxtb	r1, r7
   d437a:	b2f0      	uxtb	r0, r6
   d437c:	f001 f8f8 	bl	d5570 <shiftOut>

  // Verify we get the correct ack
  digitalWrite(_clockPin, HIGH);
   d4380:	4628      	mov	r0, r5
   d4382:	2101      	movs	r1, #1
   d4384:	f001 f8b1 	bl	d54ea <digitalWrite>
  pinMode(_dataPin, INPUT);
   d4388:	2100      	movs	r1, #0
   d438a:	4620      	mov	r0, r4
   d438c:	f001 f89c 	bl	d54c8 <pinMode>
  ack = digitalRead(_dataPin);
   d4390:	4620      	mov	r0, r4
   d4392:	f001 f8c3 	bl	d551c <digitalRead>
  if (ack != LOW) {
    //Serial.println("Ack Error 0");
  }
  digitalWrite(_clockPin, LOW);
   d4396:	4628      	mov	r0, r5
   d4398:	2100      	movs	r1, #0
   d439a:	f001 f8a6 	bl	d54ea <digitalWrite>
  ack = digitalRead(_dataPin);
   d439e:	4620      	mov	r0, r4
  if (ack != HIGH) {
    //Serial.println("Ack Error 1");
  }
}
   d43a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  ack = digitalRead(_dataPin);
  if (ack != LOW) {
    //Serial.println("Ack Error 0");
  }
  digitalWrite(_clockPin, LOW);
  ack = digitalRead(_dataPin);
   d43a4:	f001 b8ba 	b.w	d551c <digitalRead>

000d43a8 <_Z16waitForResultSHTi>:
  }
}


void waitForResultSHT(int _dataPin)// wait for the SHTx answer
{
   d43a8:	b538      	push	{r3, r4, r5, lr}
  int i;
  int ack;

  pinMode(_dataPin, INPUT);
   d43aa:	b285      	uxth	r5, r0
   d43ac:	2100      	movs	r1, #0
   d43ae:	4628      	mov	r0, r5
   d43b0:	f001 f88a 	bl	d54c8 <pinMode>
   d43b4:	2464      	movs	r4, #100	; 0x64

  for(i= 0; i < 100; ++i)
  {
    delay(10);
   d43b6:	200a      	movs	r0, #10
   d43b8:	f000 fc3e 	bl	d4c38 <delay>
    ack = digitalRead(_dataPin);
   d43bc:	4628      	mov	r0, r5
   d43be:	f001 f8ad 	bl	d551c <digitalRead>

    if (ack == LOW) {
   d43c2:	b108      	cbz	r0, d43c8 <_Z16waitForResultSHTi+0x20>
  int i;
  int ack;

  pinMode(_dataPin, INPUT);

  for(i= 0; i < 100; ++i)
   d43c4:	3c01      	subs	r4, #1
   d43c6:	d1f6      	bne.n	d43b6 <_Z16waitForResultSHTi+0xe>
   d43c8:	bd38      	pop	{r3, r4, r5, pc}

000d43ca <_Z12getData16SHTii>:
  }
}


int getData16SHT(int _dataPin, int _clockPin) // get data from the SHTx sensor
{
   d43ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int val;

  // get the MSB (most significant bits)
  pinMode(_dataPin, INPUT);
   d43ce:	b284      	uxth	r4, r0
  }
}


int getData16SHT(int _dataPin, int _clockPin) // get data from the SHTx sensor
{
   d43d0:	460e      	mov	r6, r1
   d43d2:	4605      	mov	r5, r0
  int val;

  // get the MSB (most significant bits)
  pinMode(_dataPin, INPUT);
  pinMode(_clockPin, OUTPUT);
   d43d4:	b2b7      	uxth	r7, r6
int getData16SHT(int _dataPin, int _clockPin) // get data from the SHTx sensor
{
  int val;

  // get the MSB (most significant bits)
  pinMode(_dataPin, INPUT);
   d43d6:	4620      	mov	r0, r4
   d43d8:	2100      	movs	r1, #0
   d43da:	f001 f875 	bl	d54c8 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d43de:	4638      	mov	r0, r7
   d43e0:	2101      	movs	r1, #1
   d43e2:	f001 f871 	bl	d54c8 <pinMode>
  val = myShiftIn(_dataPin, _clockPin, 8);
   d43e6:	2208      	movs	r2, #8
   d43e8:	4631      	mov	r1, r6
   d43ea:	4628      	mov	r0, r5
   d43ec:	f7ff ff78 	bl	d42e0 <_Z9myShiftIniii>
  val *= 256; // this is equivalent to val << 8;

  // send the required ACK
  pinMode(_dataPin, OUTPUT);
   d43f0:	2101      	movs	r1, #1

  // get the MSB (most significant bits)
  pinMode(_dataPin, INPUT);
  pinMode(_clockPin, OUTPUT);
  val = myShiftIn(_dataPin, _clockPin, 8);
  val *= 256; // this is equivalent to val << 8;
   d43f2:	ea4f 2800 	mov.w	r8, r0, lsl #8

  // send the required ACK
  pinMode(_dataPin, OUTPUT);
   d43f6:	4620      	mov	r0, r4
   d43f8:	f001 f866 	bl	d54c8 <pinMode>
  digitalWrite(_dataPin, HIGH);
   d43fc:	4620      	mov	r0, r4
   d43fe:	2101      	movs	r1, #1
   d4400:	f001 f873 	bl	d54ea <digitalWrite>
  digitalWrite(_dataPin, LOW);
   d4404:	4620      	mov	r0, r4
   d4406:	2100      	movs	r1, #0
   d4408:	f001 f86f 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d440c:	4638      	mov	r0, r7
   d440e:	2101      	movs	r1, #1
   d4410:	f001 f86b 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d4414:	4638      	mov	r0, r7
   d4416:	2100      	movs	r1, #0
   d4418:	f001 f867 	bl	d54ea <digitalWrite>

  // get the LSB (less significant bits)
  pinMode(_dataPin, INPUT);
   d441c:	4620      	mov	r0, r4
   d441e:	2100      	movs	r1, #0
   d4420:	f001 f852 	bl	d54c8 <pinMode>
  val |= myShiftIn(_dataPin, _clockPin, 8);
   d4424:	2208      	movs	r2, #8
   d4426:	4631      	mov	r1, r6
   d4428:	4628      	mov	r0, r5
   d442a:	f7ff ff59 	bl	d42e0 <_Z9myShiftIniii>

  return val;
}
   d442e:	ea48 0000 	orr.w	r0, r8, r0
   d4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4436 <_Z10skipCrcSHTii>:

void skipCrcSHT(int _dataPin, int _clockPin)
{
   d4436:	b538      	push	{r3, r4, r5, lr}
  // Skip acknowledge to end trans (no CRC)
  pinMode(_dataPin, OUTPUT);
   d4438:	b285      	uxth	r5, r0

  return val;
}

void skipCrcSHT(int _dataPin, int _clockPin)
{
   d443a:	460c      	mov	r4, r1
  // Skip acknowledge to end trans (no CRC)
  pinMode(_dataPin, OUTPUT);
  pinMode(_clockPin, OUTPUT);
   d443c:	b2a4      	uxth	r4, r4
}

void skipCrcSHT(int _dataPin, int _clockPin)
{
  // Skip acknowledge to end trans (no CRC)
  pinMode(_dataPin, OUTPUT);
   d443e:	4628      	mov	r0, r5
   d4440:	2101      	movs	r1, #1
   d4442:	f001 f841 	bl	d54c8 <pinMode>
  pinMode(_clockPin, OUTPUT);
   d4446:	4620      	mov	r0, r4
   d4448:	2101      	movs	r1, #1
   d444a:	f001 f83d 	bl	d54c8 <pinMode>

  digitalWrite(_dataPin, HIGH);
   d444e:	4628      	mov	r0, r5
   d4450:	2101      	movs	r1, #1
   d4452:	f001 f84a 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, HIGH);
   d4456:	4620      	mov	r0, r4
   d4458:	2101      	movs	r1, #1
   d445a:	f001 f846 	bl	d54ea <digitalWrite>
  digitalWrite(_clockPin, LOW);
   d445e:	4620      	mov	r0, r4
   d4460:	2100      	movs	r1, #0
}
   d4462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pinMode(_dataPin, OUTPUT);
  pinMode(_clockPin, OUTPUT);

  digitalWrite(_dataPin, HIGH);
  digitalWrite(_clockPin, HIGH);
  digitalWrite(_clockPin, LOW);
   d4466:	f001 b840 	b.w	d54ea <digitalWrite>
	...

000d446c <_Z18readTemperatureRawv>:
  display.display();
}
*/


double readTemperatureRaw(){
   d446c:	b570      	push	{r4, r5, r6, lr}
  int val;

  // Command to send to the SHT1x to request Temperature
  int _gTempCmd  = 0b00000011;

  sendCommandSHT(_gTempCmd, dataPin, clkPin);
   d446e:	4c0c      	ldr	r4, [pc, #48]	; (d44a0 <_Z18readTemperatureRawv+0x34>)
   d4470:	4d0c      	ldr	r5, [pc, #48]	; (d44a4 <_Z18readTemperatureRawv+0x38>)
   d4472:	6821      	ldr	r1, [r4, #0]
   d4474:	682a      	ldr	r2, [r5, #0]
   d4476:	2003      	movs	r0, #3
   d4478:	f7ff ff50 	bl	d431c <_Z14sendCommandSHTiii>

  waitForResultSHT(dataPin);
   d447c:	6820      	ldr	r0, [r4, #0]
   d447e:	f7ff ff93 	bl	d43a8 <_Z16waitForResultSHTi>

  val = getData16SHT(dataPin, clkPin);
   d4482:	6829      	ldr	r1, [r5, #0]
   d4484:	6820      	ldr	r0, [r4, #0]
   d4486:	f7ff ffa0 	bl	d43ca <_Z12getData16SHTii>

  skipCrcSHT(dataPin, clkPin);
   d448a:	6829      	ldr	r1, [r5, #0]

  sendCommandSHT(_gTempCmd, dataPin, clkPin);

  waitForResultSHT(dataPin);

  val = getData16SHT(dataPin, clkPin);
   d448c:	4606      	mov	r6, r0

  skipCrcSHT(dataPin, clkPin);
   d448e:	6820      	ldr	r0, [r4, #0]
   d4490:	f7ff ffd1 	bl	d4436 <_Z10skipCrcSHTii>

  return (val);
   d4494:	4630      	mov	r0, r6
   d4496:	f001 fb73 	bl	d5b80 <__aeabi_i2d>
}
   d449a:	ec41 0b10 	vmov	d0, r0, r1
   d449e:	bd70      	pop	{r4, r5, r6, pc}
   d44a0:	2003e438 	.word	0x2003e438
   d44a4:	2003e4b8 	.word	0x2003e4b8

000d44a8 <_Z15getTemperatureFv>:
	
}



double  getTemperatureF(){
   d44a8:	b508      	push	{r3, lr}
	double data;
	data = readTemperatureRaw();
   d44aa:	f7ff ffdf 	bl	d446c <_Z18readTemperatureRawv>
    temperature = (data * 0.018) - 39.4;  //current temperature in degrees Fahrenheit
   d44ae:	a30b      	add	r3, pc, #44	; (adr r3, d44dc <_Z15getTemperatureFv+0x34>)
   d44b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44b4:	ec51 0b10 	vmov	r0, r1, d0
   d44b8:	f001 fbc8 	bl	d5c4c <__aeabi_dmul>
   d44bc:	a309      	add	r3, pc, #36	; (adr r3, d44e4 <_Z15getTemperatureFv+0x3c>)
   d44be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44c2:	f001 fa0f 	bl	d58e4 <__aeabi_dsub>
   d44c6:	4b04      	ldr	r3, [pc, #16]	; (d44d8 <_Z15getTemperatureFv+0x30>)
   d44c8:	e9c3 0100 	strd	r0, r1, [r3]
	return temperature;
}
   d44cc:	ec41 0b10 	vmov	d0, r0, r1
   d44d0:	bd08      	pop	{r3, pc}
   d44d2:	bf00      	nop
   d44d4:	f3af 8000 	nop.w
   d44d8:	2003e4b0 	.word	0x2003e4b0
   d44dc:	8d4fdf3b 	.word	0x8d4fdf3b
   d44e0:	3f926e97 	.word	0x3f926e97
   d44e4:	33333333 	.word	0x33333333
   d44e8:	4043b333 	.word	0x4043b333

000d44ec <loop>:
  pinMode(D7, OUTPUT);// led and relay switch
}



void loop() {
   d44ec:	b537      	push	{r0, r1, r2, r4, r5, lr}

	tempSetpointAnalog = analogRead(A5);//get setpoint for temp  // was A6
   d44ee:	200e      	movs	r0, #14
   d44f0:	f001 f827 	bl	d5542 <analogRead>
   d44f4:	4b18      	ldr	r3, [pc, #96]	; (d4558 <loop+0x6c>)
	tempSetpoint = map(tempSetpointAnalog, 0, 4095, 75, 90);

	temperature = getTemperatureF();//get temp and convert
  //displayTemperature(temperature);// display temp
	
	val = digitalRead(A4);//change mode
   d44f6:	4c19      	ldr	r4, [pc, #100]	; (d455c <loop+0x70>)



void loop() {

	tempSetpointAnalog = analogRead(A5);//get setpoint for temp  // was A6
   d44f8:	6018      	str	r0, [r3, #0]
	tempSetpoint = map(tempSetpointAnalog, 0, 4095, 75, 90);
   d44fa:	235a      	movs	r3, #90	; 0x5a
   d44fc:	f640 72ff 	movw	r2, #4095	; 0xfff
   d4500:	2100      	movs	r1, #0
   d4502:	9300      	str	r3, [sp, #0]
   d4504:	234b      	movs	r3, #75	; 0x4b
   d4506:	f000 fb8b 	bl	d4c20 <_Z3mapiiiii>
   d450a:	4b15      	ldr	r3, [pc, #84]	; (d4560 <loop+0x74>)
   d450c:	6018      	str	r0, [r3, #0]

	temperature = getTemperatureF();//get temp and convert
   d450e:	f7ff ffcb 	bl	d44a8 <_Z15getTemperatureFv>
   d4512:	4b14      	ldr	r3, [pc, #80]	; (d4564 <loop+0x78>)
  //displayTemperature(temperature);// display temp
	
	val = digitalRead(A4);//change mode
   d4514:	200f      	movs	r0, #15
void loop() {

	tempSetpointAnalog = analogRead(A5);//get setpoint for temp  // was A6
	tempSetpoint = map(tempSetpointAnalog, 0, 4095, 75, 90);

	temperature = getTemperatureF();//get temp and convert
   d4516:	ed83 0b00 	vstr	d0, [r3]
  //displayTemperature(temperature);// display temp
	
	val = digitalRead(A4);//change mode
   d451a:	f000 ffff 	bl	d551c <digitalRead>
   d451e:	6020      	str	r0, [r4, #0]
	if(val){
   d4520:	b188      	cbz	r0, d4546 <loop+0x5a>
		mode += 1;
		mode = mode % 3;
   d4522:	4911      	ldr	r1, [pc, #68]	; (d4568 <loop+0x7c>)
   d4524:	680b      	ldr	r3, [r1, #0]
   d4526:	2203      	movs	r2, #3
   d4528:	3301      	adds	r3, #1
   d452a:	fb93 f2f2 	sdiv	r2, r3, r2
   d452e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d4532:	1a9b      	subs	r3, r3, r2
   d4534:	600b      	str	r3, [r1, #0]
	}
	while(val){
   d4536:	4625      	mov	r5, r4
   d4538:	6823      	ldr	r3, [r4, #0]
   d453a:	b123      	cbz	r3, d4546 <loop+0x5a>
    val = digitalRead(A4);
   d453c:	200f      	movs	r0, #15
   d453e:	f000 ffed 	bl	d551c <digitalRead>
   d4542:	6028      	str	r0, [r5, #0]
	val = digitalRead(A4);//change mode
	if(val){
		mode += 1;
		mode = mode % 3;
	}
	while(val){
   d4544:	e7f8      	b.n	d4538 <loop+0x4c>
    val = digitalRead(A4);
	}
	controlFan();
   d4546:	f7ff fe83 	bl	d4250 <_Z10controlFanv>
	delay(10);
   d454a:	200a      	movs	r0, #10

}
   d454c:	b003      	add	sp, #12
   d454e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	}
	while(val){
    val = digitalRead(A4);
	}
	controlFan();
	delay(10);
   d4552:	f000 bb71 	b.w	d4c38 <delay>
   d4556:	bf00      	nop
   d4558:	2003e4ac 	.word	0x2003e4ac
   d455c:	2003e4c4 	.word	0x2003e4c4
   d4560:	2003e4bc 	.word	0x2003e4bc
   d4564:	2003e4b0 	.word	0x2003e4b0
   d4568:	2003e4c0 	.word	0x2003e4c0

000d456c <_GLOBAL__sub_I_clkPin>:
   d456c:	f000 b812 	b.w	d4594 <HAL_Pin_Map>

000d4570 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4570:	f000 b810 	b.w	d4594 <HAL_Pin_Map>

000d4574 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <netdb_freeaddrinfo+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	689b      	ldr	r3, [r3, #8]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030268 	.word	0x00030268

000d4584 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <netdb_getaddrinfo+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	68db      	ldr	r3, [r3, #12]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030268 	.word	0x00030268

000d4594 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_Pin_Map+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	681b      	ldr	r3, [r3, #0]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003022c 	.word	0x0003022c

000d45a4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_Validate_Pin_Function+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	685b      	ldr	r3, [r3, #4]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003022c 	.word	0x0003022c

000d45b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_Pin_Mode+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	689b      	ldr	r3, [r3, #8]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003022c 	.word	0x0003022c

000d45c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_Get_Pin_Mode+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	68db      	ldr	r3, [r3, #12]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003022c 	.word	0x0003022c

000d45d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_GPIO_Write+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	691b      	ldr	r3, [r3, #16]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003022c 	.word	0x0003022c

000d45e4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_GPIO_Read+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	695b      	ldr	r3, [r3, #20]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003022c 	.word	0x0003022c

000d45f4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_ADC_Read+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003022c 	.word	0x0003022c

000d4604 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_SPI_Init+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	69db      	ldr	r3, [r3, #28]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030230 	.word	0x00030230

000d4614 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_SPI_Is_Enabled+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6a1b      	ldr	r3, [r3, #32]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030230 	.word	0x00030230

000d4624 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_RNG_GetRandomNumber+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	685b      	ldr	r3, [r3, #4]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030218 	.word	0x00030218

000d4634 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	695b      	ldr	r3, [r3, #20]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030218 	.word	0x00030218

000d4644 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <os_thread_is_current+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	689b      	ldr	r3, [r3, #8]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030248 	.word	0x00030248

000d4654 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <os_thread_join+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	691b      	ldr	r3, [r3, #16]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030248 	.word	0x00030248

000d4664 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <os_thread_cleanup+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	695b      	ldr	r3, [r3, #20]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030248 	.word	0x00030248

000d4674 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <os_mutex_create+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030248 	.word	0x00030248

000d4684 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <os_mutex_recursive_create+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030248 	.word	0x00030248

000d4694 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <inet_inet_ntop+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	695b      	ldr	r3, [r3, #20]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030264 	.word	0x00030264

000d46a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USART_Init+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	681b      	ldr	r3, [r3, #0]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003023c 	.word	0x0003023c

000d46b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USART_Write_Data+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	68db      	ldr	r3, [r3, #12]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003023c 	.word	0x0003023c

000d46c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USART_Available_Data+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	691b      	ldr	r3, [r3, #16]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003023c 	.word	0x0003023c

000d46d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USART_Read_Data+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003023c 	.word	0x0003023c

000d46e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USART_Peek_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	699b      	ldr	r3, [r3, #24]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USART_Flush_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	69db      	ldr	r3, [r3, #28]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003023c 	.word	0x0003023c

000d4704 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USART_Is_Enabled+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6a1b      	ldr	r3, [r3, #32]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003023c 	.word	0x0003023c

000d4714 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USART_Available_Data_For_Write+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003023c 	.word	0x0003023c

000d4724 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_I2C_Write_Data+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6a1b      	ldr	r3, [r3, #32]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030228 	.word	0x00030228

000d4734 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_I2C_Available_Data+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030228 	.word	0x00030228

000d4744 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_I2C_Read_Data+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030228 	.word	0x00030228

000d4754 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <HAL_I2C_Peek_Data+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030228 	.word	0x00030228

000d4764 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <HAL_I2C_Flush_Data+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030228 	.word	0x00030228

000d4774 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <HAL_I2C_Is_Enabled+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030228 	.word	0x00030228

000d4784 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <HAL_I2C_Init+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030228 	.word	0x00030228

000d4794 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <HAL_USB_USART_Init+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	681b      	ldr	r3, [r3, #0]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003024c 	.word	0x0003024c

000d47a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <HAL_USB_USART_Begin+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	685b      	ldr	r3, [r3, #4]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003024c 	.word	0x0003024c

000d47b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <HAL_USB_USART_Available_Data+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	691b      	ldr	r3, [r3, #16]
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003024c 	.word	0x0003024c

000d47c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	695b      	ldr	r3, [r3, #20]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003024c 	.word	0x0003024c

000d47d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_USB_USART_Receive_Data+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	699b      	ldr	r3, [r3, #24]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003024c 	.word	0x0003024c

000d47e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_USB_USART_Send_Data+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	69db      	ldr	r3, [r3, #28]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003024c 	.word	0x0003024c

000d47f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_USB_USART_Flush_Data+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	6a1b      	ldr	r3, [r3, #32]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003024c 	.word	0x0003024c

000d4804 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <set_system_mode+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	685b      	ldr	r3, [r3, #4]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	00030220 	.word	0x00030220

000d4814 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <system_delay_ms+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	695b      	ldr	r3, [r3, #20]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	00030220 	.word	0x00030220

000d4824 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b03      	ldr	r3, [pc, #12]	; (d4834 <system_ctrl_set_app_request_handler+0x10>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d482e:	9301      	str	r3, [sp, #4]
   d4830:	bd08      	pop	{r3, pc}
   d4832:	0000      	.short	0x0000
   d4834:	00030220 	.word	0x00030220

000d4838 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b03      	ldr	r3, [pc, #12]	; (d4848 <system_ctrl_set_result+0x10>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4842:	9301      	str	r3, [sp, #4]
   d4844:	bd08      	pop	{r3, pc}
   d4846:	0000      	.short	0x0000
   d4848:	00030220 	.word	0x00030220

000d484c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <network_connect+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	685b      	ldr	r3, [r3, #4]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030240 	.word	0x00030240

000d485c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <network_connecting+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	689b      	ldr	r3, [r3, #8]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030240 	.word	0x00030240

000d486c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <network_disconnect+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	68db      	ldr	r3, [r3, #12]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030240 	.word	0x00030240

000d487c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <network_ready+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	691b      	ldr	r3, [r3, #16]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030240 	.word	0x00030240

000d488c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <network_on+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	695b      	ldr	r3, [r3, #20]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030240 	.word	0x00030240

000d489c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <network_off+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	699b      	ldr	r3, [r3, #24]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030240 	.word	0x00030240

000d48ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <network_listen+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	69db      	ldr	r3, [r3, #28]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030240 	.word	0x00030240

000d48bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <network_listening+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6a1b      	ldr	r3, [r3, #32]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030240 	.word	0x00030240

000d48cc <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <network_set_credentials+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030240 	.word	0x00030240

000d48dc <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <network_set_listen_timeout+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030240 	.word	0x00030240

000d48ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <network_get_listen_timeout+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	00030240 	.word	0x00030240

000d48fc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <spark_variable+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	681b      	ldr	r3, [r3, #0]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	00030244 	.word	0x00030244

000d490c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <spark_function+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	685b      	ldr	r3, [r3, #4]
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	00030244 	.word	0x00030244

000d491c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030244 	.word	0x00030244

000d492c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <malloc+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	681b      	ldr	r3, [r3, #0]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003021c 	.word	0x0003021c

000d493c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <free+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	685b      	ldr	r3, [r3, #4]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	0003021c 	.word	0x0003021c

000d494c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <realloc+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	689b      	ldr	r3, [r3, #8]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	0003021c 	.word	0x0003021c

000d495c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d495c:	2200      	movs	r2, #0
   d495e:	4611      	mov	r1, r2
   d4960:	6840      	ldr	r0, [r0, #4]
   d4962:	f7ff bfab 	b.w	d48bc <network_listening>

000d4966 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4966:	2200      	movs	r2, #0
   d4968:	4611      	mov	r1, r2
   d496a:	6840      	ldr	r0, [r0, #4]
   d496c:	f7ff bfbe 	b.w	d48ec <network_get_listen_timeout>

000d4970 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4970:	2200      	movs	r2, #0
   d4972:	6840      	ldr	r0, [r0, #4]
   d4974:	f7ff bfb2 	b.w	d48dc <network_set_listen_timeout>

000d4978 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4978:	2200      	movs	r2, #0
   d497a:	f081 0101 	eor.w	r1, r1, #1
   d497e:	6840      	ldr	r0, [r0, #4]
   d4980:	f7ff bf94 	b.w	d48ac <network_listen>

000d4984 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4984:	2300      	movs	r3, #0
   d4986:	461a      	mov	r2, r3
   d4988:	4619      	mov	r1, r3
   d498a:	6840      	ldr	r0, [r0, #4]
   d498c:	f7ff bf86 	b.w	d489c <network_off>

000d4990 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4990:	2300      	movs	r3, #0
   d4992:	461a      	mov	r2, r3
   d4994:	4619      	mov	r1, r3
   d4996:	6840      	ldr	r0, [r0, #4]
   d4998:	f7ff bf78 	b.w	d488c <network_on>

000d499c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d499c:	2200      	movs	r2, #0
   d499e:	4611      	mov	r1, r2
   d49a0:	6840      	ldr	r0, [r0, #4]
   d49a2:	f7ff bf6b 	b.w	d487c <network_ready>

000d49a6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d49a6:	2200      	movs	r2, #0
   d49a8:	4611      	mov	r1, r2
   d49aa:	6840      	ldr	r0, [r0, #4]
   d49ac:	f7ff bf56 	b.w	d485c <network_connecting>

000d49b0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49b0:	2200      	movs	r2, #0
   d49b2:	2102      	movs	r1, #2
   d49b4:	6840      	ldr	r0, [r0, #4]
   d49b6:	f7ff bf59 	b.w	d486c <network_disconnect>

000d49ba <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d49ba:	2300      	movs	r3, #0
   d49bc:	461a      	mov	r2, r3
   d49be:	6840      	ldr	r0, [r0, #4]
   d49c0:	f7ff bf44 	b.w	d484c <network_connect>

000d49c4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d49c4:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d49c6:	2203      	movs	r2, #3
   d49c8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d49ca:	4a02      	ldr	r2, [pc, #8]	; (d49d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d49cc:	601a      	str	r2, [r3, #0]
   d49ce:	4770      	bx	lr
   d49d0:	2003e4cc 	.word	0x2003e4cc
   d49d4:	000d61e4 	.word	0x000d61e4

000d49d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d49d8:	4770      	bx	lr

000d49da <_ZN8SPIClassD0Ev>:
   d49da:	b510      	push	{r4, lr}
   d49dc:	2110      	movs	r1, #16
   d49de:	4604      	mov	r4, r0
   d49e0:	f000 fe31 	bl	d5646 <_ZdlPvj>
   d49e4:	4620      	mov	r0, r4
   d49e6:	bd10      	pop	{r4, pc}

000d49e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d49e8:	b570      	push	{r4, r5, r6, lr}
   d49ea:	4b08      	ldr	r3, [pc, #32]	; (d4a0c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d49ec:	6003      	str	r3, [r0, #0]
   d49ee:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d49f0:	2500      	movs	r5, #0
   d49f2:	460e      	mov	r6, r1
   d49f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d49f8:	f7ff fe3c 	bl	d4674 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d49fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d49fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4a00:	f7ff fe00 	bl	d4604 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4a04:	60a5      	str	r5, [r4, #8]
}
   d4a06:	4620      	mov	r0, r4
   d4a08:	bd70      	pop	{r4, r5, r6, pc}
   d4a0a:	bf00      	nop
   d4a0c:	000d6218 	.word	0x000d6218

000d4a10 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4a10:	7900      	ldrb	r0, [r0, #4]
   d4a12:	f7ff bdff 	b.w	d4614 <HAL_SPI_Is_Enabled>
	...

000d4a18 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4a18:	4b04      	ldr	r3, [pc, #16]	; (d4a2c <_GLOBAL__sub_I_System+0x14>)
   d4a1a:	2000      	movs	r0, #0
   d4a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4a20:	7018      	strb	r0, [r3, #0]
   d4a22:	8058      	strh	r0, [r3, #2]
   d4a24:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a26:	f7ff beed 	b.w	d4804 <set_system_mode>
   d4a2a:	bf00      	nop
   d4a2c:	2003e4d4 	.word	0x2003e4d4

000d4a30 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4a30:	b510      	push	{r4, lr}
   d4a32:	4604      	mov	r4, r0
{
	free(buffer);
   d4a34:	6800      	ldr	r0, [r0, #0]
   d4a36:	f7ff ff81 	bl	d493c <free>
}
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	bd10      	pop	{r4, pc}

000d4a3e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4a3e:	b510      	push	{r4, lr}
   d4a40:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a42:	6800      	ldr	r0, [r0, #0]
   d4a44:	b108      	cbz	r0, d4a4a <_ZN6String10invalidateEv+0xc>
   d4a46:	f7ff ff79 	bl	d493c <free>
	buffer = NULL;
   d4a4a:	2300      	movs	r3, #0
   d4a4c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4a4e:	60a3      	str	r3, [r4, #8]
   d4a50:	6063      	str	r3, [r4, #4]
   d4a52:	bd10      	pop	{r4, pc}

000d4a54 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a54:	b538      	push	{r3, r4, r5, lr}
   d4a56:	4604      	mov	r4, r0
   d4a58:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a5a:	6800      	ldr	r0, [r0, #0]
   d4a5c:	3101      	adds	r1, #1
   d4a5e:	f7ff ff75 	bl	d494c <realloc>
	if (newbuffer) {
   d4a62:	b110      	cbz	r0, d4a6a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a64:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4a68:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a6a:	bd38      	pop	{r3, r4, r5, pc}

000d4a6c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a6c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a6e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4a70:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a72:	b113      	cbz	r3, d4a7a <_ZN6String7reserveEj+0xe>
   d4a74:	6843      	ldr	r3, [r0, #4]
   d4a76:	428b      	cmp	r3, r1
   d4a78:	d207      	bcs.n	d4a8a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	f7ff ffea 	bl	d4a54 <_ZN6String12changeBufferEj>
   d4a80:	b120      	cbz	r0, d4a8c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4a82:	68a3      	ldr	r3, [r4, #8]
   d4a84:	b90b      	cbnz	r3, d4a8a <_ZN6String7reserveEj+0x1e>
   d4a86:	6822      	ldr	r2, [r4, #0]
   d4a88:	7013      	strb	r3, [r2, #0]
   d4a8a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4a8c:	bd10      	pop	{r4, pc}

000d4a8e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a8e:	b570      	push	{r4, r5, r6, lr}
   d4a90:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4a92:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a94:	4604      	mov	r4, r0
   d4a96:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4a98:	f7ff ffe8 	bl	d4a6c <_ZN6String7reserveEj>
   d4a9c:	b918      	cbnz	r0, d4aa6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	f7ff ffcd 	bl	d4a3e <_ZN6String10invalidateEv>
		return *this;
   d4aa4:	e009      	b.n	d4aba <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4aa6:	462a      	mov	r2, r5
   d4aa8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4aaa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4aac:	6820      	ldr	r0, [r4, #0]
   d4aae:	f001 fb15 	bl	d60dc <memcpy>
	buffer[len] = 0;
   d4ab2:	6822      	ldr	r2, [r4, #0]
   d4ab4:	68a3      	ldr	r3, [r4, #8]
   d4ab6:	2100      	movs	r1, #0
   d4ab8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4aba:	4620      	mov	r0, r4
   d4abc:	bd70      	pop	{r4, r5, r6, pc}

000d4abe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4abe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ac0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4ac2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ac4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4ac6:	6043      	str	r3, [r0, #4]
	len = 0;
   d4ac8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4aca:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4acc:	460d      	mov	r5, r1
   d4ace:	b139      	cbz	r1, d4ae0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4ad0:	4608      	mov	r0, r1
   d4ad2:	f001 fb49 	bl	d6168 <strlen>
   d4ad6:	4629      	mov	r1, r5
   d4ad8:	4602      	mov	r2, r0
   d4ada:	4620      	mov	r0, r4
   d4adc:	f7ff ffd7 	bl	d4a8e <_ZN6String4copyEPKcj>
}
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	bd38      	pop	{r3, r4, r5, pc}

000d4ae4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4ae4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4ae6:	b510      	push	{r4, lr}
   d4ae8:	460b      	mov	r3, r1
   d4aea:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4aec:	d007      	beq.n	d4afe <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4aee:	6809      	ldr	r1, [r1, #0]
   d4af0:	b119      	cbz	r1, d4afa <_ZN6StringaSERKS_+0x16>
   d4af2:	689a      	ldr	r2, [r3, #8]
   d4af4:	f7ff ffcb 	bl	d4a8e <_ZN6String4copyEPKcj>
   d4af8:	e001      	b.n	d4afe <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4afa:	f7ff ffa0 	bl	d4a3e <_ZN6String10invalidateEv>

	return *this;
}
   d4afe:	4620      	mov	r0, r4
   d4b00:	bd10      	pop	{r4, pc}

000d4b02 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4b02:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b04:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4b06:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b08:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4b0a:	6043      	str	r3, [r0, #4]
	len = 0;
   d4b0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4b0e:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4b10:	f7ff ffe8 	bl	d4ae4 <_ZN6StringaSERKS_>
}
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd10      	pop	{r4, pc}

000d4b18 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4b18:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4b1a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4b1c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4b1e:	b912      	cbnz	r2, d4b26 <_ZNK6String6equalsEPKc+0xe>
   d4b20:	b919      	cbnz	r1, d4b2a <_ZNK6String6equalsEPKc+0x12>
   d4b22:	2001      	movs	r0, #1
   d4b24:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4b26:	b911      	cbnz	r1, d4b2e <_ZNK6String6equalsEPKc+0x16>
   d4b28:	6803      	ldr	r3, [r0, #0]
   d4b2a:	7818      	ldrb	r0, [r3, #0]
   d4b2c:	e002      	b.n	d4b34 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d4b2e:	6800      	ldr	r0, [r0, #0]
   d4b30:	f001 fb10 	bl	d6154 <strcmp>
   d4b34:	fab0 f080 	clz	r0, r0
   d4b38:	0940      	lsrs	r0, r0, #5
}
   d4b3a:	bd08      	pop	{r3, pc}

000d4b3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4b3c:	4802      	ldr	r0, [pc, #8]	; (d4b48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4b3e:	2300      	movs	r3, #0
   d4b40:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4b42:	f7ff bd9f 	b.w	d4684 <os_mutex_recursive_create>
   d4b46:	bf00      	nop
   d4b48:	2003e4dc 	.word	0x2003e4dc

000d4b4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b4e:	4606      	mov	r6, r0
   d4b50:	460d      	mov	r5, r1
   d4b52:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4b54:	2400      	movs	r4, #0
  while (size--) {
   d4b56:	42bd      	cmp	r5, r7
   d4b58:	d00c      	beq.n	d4b74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4b5a:	6833      	ldr	r3, [r6, #0]
   d4b5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4b60:	689b      	ldr	r3, [r3, #8]
   d4b62:	4630      	mov	r0, r6
   d4b64:	4798      	blx	r3
     if (chunk>=0)
   d4b66:	2800      	cmp	r0, #0
   d4b68:	db01      	blt.n	d4b6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4b6a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4b6c:	e7f3      	b.n	d4b56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4b6e:	2c00      	cmp	r4, #0
   d4b70:	bf08      	it	eq
   d4b72:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4b74:	4620      	mov	r0, r4
   d4b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4b78:	b570      	push	{r4, r5, r6, lr}
   d4b7a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4b7c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4b7e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4b80:	b149      	cbz	r1, d4b96 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4b82:	f001 faf1 	bl	d6168 <strlen>
   d4b86:	682b      	ldr	r3, [r5, #0]
   d4b88:	4602      	mov	r2, r0
   d4b8a:	4621      	mov	r1, r4
   d4b8c:	4628      	mov	r0, r5
   d4b8e:	68db      	ldr	r3, [r3, #12]
    }
   d4b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b94:	4718      	bx	r3
    }
   d4b96:	bd70      	pop	{r4, r5, r6, pc}

000d4b98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b98:	6803      	ldr	r3, [r0, #0]
   d4b9a:	689b      	ldr	r3, [r3, #8]
   d4b9c:	4718      	bx	r3

000d4b9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b9e:	b530      	push	{r4, r5, lr}
   d4ba0:	b08b      	sub	sp, #44	; 0x2c
   d4ba2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ba4:	2100      	movs	r1, #0
   d4ba6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4baa:	2a01      	cmp	r2, #1
   d4bac:	bf98      	it	ls
   d4bae:	220a      	movls	r2, #10
   d4bb0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4bb4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4bb8:	fb05 3312 	mls	r3, r5, r2, r3
   d4bbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4bc0:	2b09      	cmp	r3, #9
   d4bc2:	bf94      	ite	ls
   d4bc4:	3330      	addls	r3, #48	; 0x30
   d4bc6:	3337      	addhi	r3, #55	; 0x37
   d4bc8:	b2db      	uxtb	r3, r3
   d4bca:	4621      	mov	r1, r4
   d4bcc:	f804 3901 	strb.w	r3, [r4], #-1
   d4bd0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4bd2:	2d00      	cmp	r5, #0
   d4bd4:	d1ee      	bne.n	d4bb4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4bd6:	f7ff ffcf 	bl	d4b78 <_ZN5Print5writeEPKc>
}
   d4bda:	b00b      	add	sp, #44	; 0x2c
   d4bdc:	bd30      	pop	{r4, r5, pc}

000d4bde <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4bde:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4be0:	b92a      	cbnz	r2, d4bee <_ZN5Print5printEmi+0x10>
   d4be2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4be4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4be8:	689b      	ldr	r3, [r3, #8]
   d4bea:	b2c9      	uxtb	r1, r1
   d4bec:	4718      	bx	r3
  else return printNumber(n, base);
   d4bee:	b2d2      	uxtb	r2, r2
}
   d4bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4bf4:	f7ff bfd3 	b.w	d4b9e <_ZN5Print11printNumberEmh>

000d4bf8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4bf8:	f7ff bff1 	b.w	d4bde <_ZN5Print5printEmi>

000d4bfc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4bfc:	4b01      	ldr	r3, [pc, #4]	; (d4c04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4bfe:	4a02      	ldr	r2, [pc, #8]	; (d4c08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c00:	601a      	str	r2, [r3, #0]
   d4c02:	4770      	bx	lr
   d4c04:	2003e4e0 	.word	0x2003e4e0
   d4c08:	000d6293 	.word	0x000d6293

000d4c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4c0c:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4c0e:	681a      	ldr	r2, [r3, #0]
   d4c10:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4c12:	601a      	str	r2, [r3, #0]
   d4c14:	4770      	bx	lr
   d4c16:	bf00      	nop
   d4c18:	2003e43c 	.word	0x2003e43c
   d4c1c:	2003e4e4 	.word	0x2003e4e4

000d4c20 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   d4c20:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
   d4c22:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
   d4c24:	d007      	beq.n	d4c36 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   d4c26:	9d03      	ldr	r5, [sp, #12]
   d4c28:	1a44      	subs	r4, r0, r1
   d4c2a:	1aed      	subs	r5, r5, r3
   d4c2c:	436c      	muls	r4, r5
   d4c2e:	1a52      	subs	r2, r2, r1
   d4c30:	fb94 f4f2 	sdiv	r4, r4, r2
   d4c34:	18e0      	adds	r0, r4, r3
}
   d4c36:	bd30      	pop	{r4, r5, pc}

000d4c38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4c38:	2100      	movs	r1, #0
   d4c3a:	f7ff bdeb 	b.w	d4814 <system_delay_ms>

000d4c3e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c3e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4c40:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4c42:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4c44:	b113      	cbz	r3, d4c4c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4c46:	2203      	movs	r2, #3
   d4c48:	4601      	mov	r1, r0
   d4c4a:	4798      	blx	r3
    }
   d4c4c:	4620      	mov	r0, r4
   d4c4e:	bd10      	pop	{r4, pc}

000d4c50 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4c50:	b510      	push	{r4, lr}
   d4c52:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c54:	f7ff fff3 	bl	d4c3e <_ZNSt14_Function_baseD1Ev>
   d4c58:	4620      	mov	r0, r4
   d4c5a:	bd10      	pop	{r4, pc}

000d4c5c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4c5c:	4803      	ldr	r0, [pc, #12]	; (d4c6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4c5e:	4a04      	ldr	r2, [pc, #16]	; (d4c70 <_GLOBAL__sub_I_RGB+0x14>)
   d4c60:	4904      	ldr	r1, [pc, #16]	; (d4c74 <_GLOBAL__sub_I_RGB+0x18>)
   d4c62:	2300      	movs	r3, #0
   d4c64:	6083      	str	r3, [r0, #8]
   d4c66:	f000 bce9 	b.w	d563c <__aeabi_atexit>
   d4c6a:	bf00      	nop
   d4c6c:	2003e4e8 	.word	0x2003e4e8
   d4c70:	2003e4a8 	.word	0x2003e4a8
   d4c74:	000d4c51 	.word	0x000d4c51

000d4c78 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4c78:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4c7a:	4b0c      	ldr	r3, [pc, #48]	; (d4cac <serialEventRun+0x34>)
   d4c7c:	b133      	cbz	r3, d4c8c <serialEventRun+0x14>
   d4c7e:	f000 f967 	bl	d4f50 <_Z16_fetch_usbserialv>
   d4c82:	6803      	ldr	r3, [r0, #0]
   d4c84:	691b      	ldr	r3, [r3, #16]
   d4c86:	4798      	blx	r3
   d4c88:	2800      	cmp	r0, #0
   d4c8a:	dc09      	bgt.n	d4ca0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4c8c:	4b08      	ldr	r3, [pc, #32]	; (d4cb0 <serialEventRun+0x38>)
   d4c8e:	b163      	cbz	r3, d4caa <serialEventRun+0x32>
   d4c90:	f000 f9e0 	bl	d5054 <_Z22__fetch_global_Serial1v>
   d4c94:	6803      	ldr	r3, [r0, #0]
   d4c96:	691b      	ldr	r3, [r3, #16]
   d4c98:	4798      	blx	r3
   d4c9a:	2800      	cmp	r0, #0
   d4c9c:	dc03      	bgt.n	d4ca6 <serialEventRun+0x2e>
   d4c9e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ca0:	f3af 8000 	nop.w
   d4ca4:	e7f2      	b.n	d4c8c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ca6:	f3af 8000 	nop.w
   d4caa:	bd08      	pop	{r3, pc}
	...

000d4cb4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4cb4:	b508      	push	{r3, lr}
	serialEventRun();
   d4cb6:	f7ff ffdf 	bl	d4c78 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4cba:	f7ff fcbb 	bl	d4634 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4cbe:	4b01      	ldr	r3, [pc, #4]	; (d4cc4 <_post_loop+0x10>)
   d4cc0:	6018      	str	r0, [r3, #0]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	2003e738 	.word	0x2003e738

000d4cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4cc8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4cca:	2300      	movs	r3, #0
   d4ccc:	9300      	str	r3, [sp, #0]
   d4cce:	461a      	mov	r2, r3
   d4cd0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4cd4:	f7ff fdb0 	bl	d4838 <system_ctrl_set_result>
}
   d4cd8:	b003      	add	sp, #12
   d4cda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ce0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4ce0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4ce2:	8843      	ldrh	r3, [r0, #2]
   d4ce4:	2b0a      	cmp	r3, #10
   d4ce6:	d008      	beq.n	d4cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4ce8:	2b50      	cmp	r3, #80	; 0x50
   d4cea:	d109      	bne.n	d4d00 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4cec:	4b09      	ldr	r3, [pc, #36]	; (d4d14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4cee:	681b      	ldr	r3, [r3, #0]
   d4cf0:	b13b      	cbz	r3, d4d02 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4cf2:	b003      	add	sp, #12
   d4cf4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4cf8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4cfa:	f7ff ffe5 	bl	d4cc8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4cfe:	e006      	b.n	d4d0e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4d00:	2300      	movs	r3, #0
   d4d02:	9300      	str	r3, [sp, #0]
   d4d04:	461a      	mov	r2, r3
   d4d06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4d0a:	f7ff fd95 	bl	d4838 <system_ctrl_set_result>
        break;
    }
}
   d4d0e:	b003      	add	sp, #12
   d4d10:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d14:	2003e4f8 	.word	0x2003e4f8

000d4d18 <module_user_init_hook>:

void module_user_init_hook()
{
   d4d18:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4d1a:	f7ff fc83 	bl	d4624 <HAL_RNG_GetRandomNumber>
   d4d1e:	4604      	mov	r4, r0
    srand(seed);
   d4d20:	f001 f9f0 	bl	d6104 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4d24:	4b07      	ldr	r3, [pc, #28]	; (d4d44 <module_user_init_hook+0x2c>)
   d4d26:	b113      	cbz	r3, d4d2e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4d28:	4620      	mov	r0, r4
   d4d2a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4d2e:	2100      	movs	r1, #0
   d4d30:	4804      	ldr	r0, [pc, #16]	; (d4d44 <module_user_init_hook+0x2c>)
   d4d32:	f7ff fdf3 	bl	d491c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d36:	2100      	movs	r1, #0
   d4d38:	4803      	ldr	r0, [pc, #12]	; (d4d48 <module_user_init_hook+0x30>)
}
   d4d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4d3e:	f7ff bd71 	b.w	d4824 <system_ctrl_set_app_request_handler>
   d4d42:	bf00      	nop
   d4d44:	00000000 	.word	0x00000000
   d4d48:	000d4ce1 	.word	0x000d4ce1

000d4d4c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d4d4c:	b510      	push	{r4, lr}
   d4d4e:	b088      	sub	sp, #32
   d4d50:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4d52:	4668      	mov	r0, sp
   d4d54:	f7ff feb3 	bl	d4abe <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d4d58:	4669      	mov	r1, sp
   d4d5a:	a804      	add	r0, sp, #16
   d4d5c:	f7ff fed1 	bl	d4b02 <_ZN6StringC1ERKS_>
   d4d60:	a804      	add	r0, sp, #16
   d4d62:	47a0      	blx	r4
   d4d64:	4604      	mov	r4, r0
   d4d66:	a804      	add	r0, sp, #16
   d4d68:	f7ff fe62 	bl	d4a30 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4d6c:	4668      	mov	r0, sp
   d4d6e:	f7ff fe5f 	bl	d4a30 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d4d72:	4620      	mov	r0, r4
   d4d74:	b008      	add	sp, #32
   d4d76:	bd10      	pop	{r4, pc}

000d4d78 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4d78:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d4d7a:	2410      	movs	r4, #16
   d4d7c:	b085      	sub	sp, #20
   d4d7e:	4607      	mov	r7, r0
   d4d80:	460e      	mov	r6, r1
   d4d82:	4615      	mov	r5, r2
   d4d84:	2100      	movs	r1, #0
   d4d86:	4622      	mov	r2, r4
   d4d88:	4668      	mov	r0, sp
   d4d8a:	f001 f9b2 	bl	d60f2 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4d8e:	2200      	movs	r2, #0
   d4d90:	4669      	mov	r1, sp
   d4d92:	4610      	mov	r0, r2
         size = sizeof(*this);
   d4d94:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d4d98:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d4d9a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d4d9c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4d9e:	f7ff fdb5 	bl	d490c <spark_function>
}
   d4da2:	b005      	add	sp, #20
   d4da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4da6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4da6:	4770      	bx	lr

000d4da8 <_ZN9IPAddressD0Ev>:
   d4da8:	b510      	push	{r4, lr}
   d4daa:	2118      	movs	r1, #24
   d4dac:	4604      	mov	r4, r0
   d4dae:	f000 fc4a 	bl	d5646 <_ZdlPvj>
   d4db2:	4620      	mov	r0, r4
   d4db4:	bd10      	pop	{r4, pc}

000d4db6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4db6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4db8:	7d03      	ldrb	r3, [r0, #20]
   d4dba:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4dbc:	b08d      	sub	sp, #52	; 0x34
   d4dbe:	460e      	mov	r6, r1
   d4dc0:	f100 0704 	add.w	r7, r0, #4
   d4dc4:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4dc8:	d002      	beq.n	d4dd0 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4dca:	f100 0508 	add.w	r5, r0, #8
   d4dce:	e018      	b.n	d4e02 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4dd0:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4dd2:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4dd4:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4dd8:	232f      	movs	r3, #47	; 0x2f
   d4dda:	462a      	mov	r2, r5
   d4ddc:	200a      	movs	r0, #10
   d4dde:	f7ff fc59 	bl	d4694 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4de2:	4628      	mov	r0, r5
   d4de4:	f001 f9c0 	bl	d6168 <strlen>
   d4de8:	6833      	ldr	r3, [r6, #0]
   d4dea:	4602      	mov	r2, r0
   d4dec:	68db      	ldr	r3, [r3, #12]
   d4dee:	4629      	mov	r1, r5
   d4df0:	4630      	mov	r0, r6
   d4df2:	4798      	blx	r3
   d4df4:	e00f      	b.n	d4e16 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4df6:	b124      	cbz	r4, d4e02 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4df8:	212e      	movs	r1, #46	; 0x2e
   d4dfa:	4630      	mov	r0, r6
   d4dfc:	f7ff fecc 	bl	d4b98 <_ZN5Print5printEc>
   d4e00:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4e02:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e06:	220a      	movs	r2, #10
   d4e08:	4630      	mov	r0, r6
   d4e0a:	f7ff fef5 	bl	d4bf8 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e0e:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e10:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e12:	d1f0      	bne.n	d4df6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e14:	4620      	mov	r0, r4
    }
    return n;
}
   d4e16:	b00d      	add	sp, #52	; 0x34
   d4e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4e1c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4e1c:	b510      	push	{r4, lr}
   d4e1e:	4b05      	ldr	r3, [pc, #20]	; (d4e34 <_ZN9IPAddressC1Ev+0x18>)
   d4e20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e22:	2211      	movs	r2, #17
   d4e24:	f840 3b04 	str.w	r3, [r0], #4
   d4e28:	2100      	movs	r1, #0
   d4e2a:	f001 f962 	bl	d60f2 <memset>
{
    clear();
}
   d4e2e:	4620      	mov	r0, r4
   d4e30:	bd10      	pop	{r4, pc}
   d4e32:	bf00      	nop
   d4e34:	000d6334 	.word	0x000d6334

000d4e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e38:	4603      	mov	r3, r0
   d4e3a:	4a07      	ldr	r2, [pc, #28]	; (d4e58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e3c:	b510      	push	{r4, lr}
   d4e3e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4e42:	f101 0210 	add.w	r2, r1, #16
   d4e46:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e4a:	f843 4b04 	str.w	r4, [r3], #4
   d4e4e:	4291      	cmp	r1, r2
   d4e50:	d1f9      	bne.n	d4e46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e52:	780a      	ldrb	r2, [r1, #0]
   d4e54:	701a      	strb	r2, [r3, #0]
}
   d4e56:	bd10      	pop	{r4, pc}
   d4e58:	000d6334 	.word	0x000d6334

000d4e5c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4e5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4e5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4e6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4e6e:	2304      	movs	r3, #4
   d4e70:	6041      	str	r1, [r0, #4]
   d4e72:	7503      	strb	r3, [r0, #20]
   d4e74:	bd10      	pop	{r4, pc}

000d4e76 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e78:	780d      	ldrb	r5, [r1, #0]
   d4e7a:	788b      	ldrb	r3, [r1, #2]
   d4e7c:	784a      	ldrb	r2, [r1, #1]
   d4e7e:	78c9      	ldrb	r1, [r1, #3]
   d4e80:	9100      	str	r1, [sp, #0]
   d4e82:	4629      	mov	r1, r5
   d4e84:	f7ff ffea 	bl	d4e5c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e88:	b003      	add	sp, #12
   d4e8a:	bd30      	pop	{r4, r5, pc}

000d4e8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e8c:	7441      	strb	r1, [r0, #17]
   d4e8e:	4770      	bx	lr

000d4e90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4e90:	4770      	bx	lr

000d4e92 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4e92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4e94:	2100      	movs	r1, #0
   d4e96:	7c00      	ldrb	r0, [r0, #16]
   d4e98:	f7ff fc9c 	bl	d47d4 <HAL_USB_USART_Receive_Data>
}
   d4e9c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ea0:	bf28      	it	cs
   d4ea2:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ea6:	bd08      	pop	{r3, pc}

000d4ea8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4ea8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4eaa:	2101      	movs	r1, #1
   d4eac:	7c00      	ldrb	r0, [r0, #16]
   d4eae:	f7ff fc91 	bl	d47d4 <HAL_USB_USART_Receive_Data>
}
   d4eb2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4eb6:	bf28      	it	cs
   d4eb8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ebc:	bd08      	pop	{r3, pc}

000d4ebe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4ebe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4ec0:	7c00      	ldrb	r0, [r0, #16]
   d4ec2:	f7ff fc7f 	bl	d47c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d4ec6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4eca:	bd08      	pop	{r3, pc}

000d4ecc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4ecc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4ece:	7c00      	ldrb	r0, [r0, #16]
   d4ed0:	f7ff fc70 	bl	d47b4 <HAL_USB_USART_Available_Data>
}
   d4ed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ed8:	bd08      	pop	{r3, pc}

000d4eda <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4eda:	7c00      	ldrb	r0, [r0, #16]
   d4edc:	f7ff bc8a 	b.w	d47f4 <HAL_USB_USART_Flush_Data>

000d4ee0 <_ZN9USBSerialD0Ev>:
   d4ee0:	b510      	push	{r4, lr}
   d4ee2:	2114      	movs	r1, #20
   d4ee4:	4604      	mov	r4, r0
   d4ee6:	f000 fbae 	bl	d5646 <_ZdlPvj>
   d4eea:	4620      	mov	r0, r4
   d4eec:	bd10      	pop	{r4, pc}

000d4eee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4eee:	b538      	push	{r3, r4, r5, lr}
   d4ef0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ef2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4ef4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ef6:	f7ff fc65 	bl	d47c4 <HAL_USB_USART_Available_Data_For_Write>
   d4efa:	2800      	cmp	r0, #0
   d4efc:	dc01      	bgt.n	d4f02 <_ZN9USBSerial5writeEh+0x14>
   d4efe:	7c60      	ldrb	r0, [r4, #17]
   d4f00:	b128      	cbz	r0, d4f0e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f02:	4629      	mov	r1, r5
   d4f04:	7c20      	ldrb	r0, [r4, #16]
   d4f06:	f7ff fc6d 	bl	d47e4 <HAL_USB_USART_Send_Data>
   d4f0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f0e:	bd38      	pop	{r3, r4, r5, pc}

000d4f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f10:	b510      	push	{r4, lr}
   d4f12:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f14:	2300      	movs	r3, #0
   d4f16:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f1c:	60a3      	str	r3, [r4, #8]
   d4f1e:	4b05      	ldr	r3, [pc, #20]	; (d4f34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f20:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f22:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f24:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f26:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f28:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f2a:	4611      	mov	r1, r2
   d4f2c:	f7ff fc32 	bl	d4794 <HAL_USB_USART_Init>
}
   d4f30:	4620      	mov	r0, r4
   d4f32:	bd10      	pop	{r4, pc}
   d4f34:	000d6348 	.word	0x000d6348

000d4f38 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f38:	2200      	movs	r2, #0
   d4f3a:	7c00      	ldrb	r0, [r0, #16]
   d4f3c:	f7ff bc32 	b.w	d47a4 <HAL_USB_USART_Begin>

000d4f40 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f42:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f46:	2100      	movs	r1, #0
   d4f48:	f001 f8d3 	bl	d60f2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	bd10      	pop	{r4, pc}

000d4f50 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4f50:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f52:	4d0e      	ldr	r5, [pc, #56]	; (d4f8c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4f54:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4f56:	a801      	add	r0, sp, #4
   d4f58:	f7ff fff2 	bl	d4f40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f5c:	6829      	ldr	r1, [r5, #0]
   d4f5e:	f011 0401 	ands.w	r4, r1, #1
   d4f62:	d110      	bne.n	d4f86 <_Z16_fetch_usbserialv+0x36>
   d4f64:	4628      	mov	r0, r5
   d4f66:	f7ff f89e 	bl	d40a6 <__cxa_guard_acquire>
   d4f6a:	b160      	cbz	r0, d4f86 <_Z16_fetch_usbserialv+0x36>
   d4f6c:	aa01      	add	r2, sp, #4
   d4f6e:	4621      	mov	r1, r4
   d4f70:	4807      	ldr	r0, [pc, #28]	; (d4f90 <_Z16_fetch_usbserialv+0x40>)
   d4f72:	f7ff ffcd 	bl	d4f10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4f76:	4628      	mov	r0, r5
   d4f78:	f7ff f89a 	bl	d40b0 <__cxa_guard_release>
   d4f7c:	4a05      	ldr	r2, [pc, #20]	; (d4f94 <_Z16_fetch_usbserialv+0x44>)
   d4f7e:	4906      	ldr	r1, [pc, #24]	; (d4f98 <_Z16_fetch_usbserialv+0x48>)
   d4f80:	4803      	ldr	r0, [pc, #12]	; (d4f90 <_Z16_fetch_usbserialv+0x40>)
   d4f82:	f000 fb5b 	bl	d563c <__aeabi_atexit>
	return _usbserial;
}
   d4f86:	4802      	ldr	r0, [pc, #8]	; (d4f90 <_Z16_fetch_usbserialv+0x40>)
   d4f88:	b007      	add	sp, #28
   d4f8a:	bd30      	pop	{r4, r5, pc}
   d4f8c:	2003e4fc 	.word	0x2003e4fc
   d4f90:	2003e500 	.word	0x2003e500
   d4f94:	2003e4a8 	.word	0x2003e4a8
   d4f98:	000d4e91 	.word	0x000d4e91

000d4f9c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4f9c:	4770      	bx	lr

000d4f9e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f9e:	7441      	strb	r1, [r0, #17]
   d4fa0:	4770      	bx	lr

000d4fa2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4fa2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4fa4:	7c00      	ldrb	r0, [r0, #16]
   d4fa6:	f7ff fbb5 	bl	d4714 <HAL_USART_Available_Data_For_Write>
}
   d4faa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4fae:	bd08      	pop	{r3, pc}

000d4fb0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4fb0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4fb2:	7c00      	ldrb	r0, [r0, #16]
   d4fb4:	f7ff fb86 	bl	d46c4 <HAL_USART_Available_Data>
}
   d4fb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4fbc:	bd08      	pop	{r3, pc}

000d4fbe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4fbe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4fc0:	7c00      	ldrb	r0, [r0, #16]
   d4fc2:	f7ff fb8f 	bl	d46e4 <HAL_USART_Peek_Data>
}
   d4fc6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4fca:	bf28      	it	cs
   d4fcc:	f04f 30ff 	movcs.w	r0, #4294967295
   d4fd0:	bd08      	pop	{r3, pc}

000d4fd2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4fd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4fd4:	7c00      	ldrb	r0, [r0, #16]
   d4fd6:	f7ff fb7d 	bl	d46d4 <HAL_USART_Read_Data>
}
   d4fda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4fde:	bf28      	it	cs
   d4fe0:	f04f 30ff 	movcs.w	r0, #4294967295
   d4fe4:	bd08      	pop	{r3, pc}

000d4fe6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4fe6:	7c00      	ldrb	r0, [r0, #16]
   d4fe8:	f7ff bb84 	b.w	d46f4 <HAL_USART_Flush_Data>

000d4fec <_ZN11USARTSerialD0Ev>:
   d4fec:	b510      	push	{r4, lr}
   d4fee:	2114      	movs	r1, #20
   d4ff0:	4604      	mov	r4, r0
   d4ff2:	f000 fb28 	bl	d5646 <_ZdlPvj>
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	bd10      	pop	{r4, pc}

000d4ffa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4ffa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ffc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4ffe:	4604      	mov	r4, r0
   d5000:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5002:	b925      	cbnz	r5, d500e <_ZN11USARTSerial5writeEh+0x14>
   d5004:	7c00      	ldrb	r0, [r0, #16]
   d5006:	f7ff fb85 	bl	d4714 <HAL_USART_Available_Data_For_Write>
   d500a:	2800      	cmp	r0, #0
   d500c:	dd05      	ble.n	d501a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d500e:	4631      	mov	r1, r6
   d5010:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5016:	f7ff bb4d 	b.w	d46b4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d501a:	4628      	mov	r0, r5
   d501c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5020 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5020:	b510      	push	{r4, lr}
   d5022:	4604      	mov	r4, r0
   d5024:	4608      	mov	r0, r1
   d5026:	4611      	mov	r1, r2
   d5028:	2200      	movs	r2, #0
   d502a:	6062      	str	r2, [r4, #4]
   d502c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5030:	60a2      	str	r2, [r4, #8]
   d5032:	4a05      	ldr	r2, [pc, #20]	; (d5048 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5034:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5036:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5038:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d503a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d503c:	461a      	mov	r2, r3
   d503e:	f7ff fb31 	bl	d46a4 <HAL_USART_Init>
}
   d5042:	4620      	mov	r0, r4
   d5044:	bd10      	pop	{r4, pc}
   d5046:	bf00      	nop
   d5048:	000d6378 	.word	0x000d6378

000d504c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d504c:	7c00      	ldrb	r0, [r0, #16]
   d504e:	f7ff bb59 	b.w	d4704 <HAL_USART_Is_Enabled>
	...

000d5054 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5056:	4c19      	ldr	r4, [pc, #100]	; (d50bc <_Z22__fetch_global_Serial1v+0x68>)
   d5058:	6825      	ldr	r5, [r4, #0]
   d505a:	b94d      	cbnz	r5, d5070 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d505c:	2084      	movs	r0, #132	; 0x84
   d505e:	f7ff f81c 	bl	d409a <_Znwj>
   d5062:	4606      	mov	r6, r0
   d5064:	b118      	cbz	r0, d506e <_Z22__fetch_global_Serial1v+0x1a>
   d5066:	2284      	movs	r2, #132	; 0x84
   d5068:	4629      	mov	r1, r5
   d506a:	f001 f842 	bl	d60f2 <memset>
   d506e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5070:	4d13      	ldr	r5, [pc, #76]	; (d50c0 <_Z22__fetch_global_Serial1v+0x6c>)
   d5072:	682e      	ldr	r6, [r5, #0]
   d5074:	b94e      	cbnz	r6, d508a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5076:	2084      	movs	r0, #132	; 0x84
   d5078:	f7ff f80f 	bl	d409a <_Znwj>
   d507c:	4607      	mov	r7, r0
   d507e:	b118      	cbz	r0, d5088 <_Z22__fetch_global_Serial1v+0x34>
   d5080:	2284      	movs	r2, #132	; 0x84
   d5082:	4631      	mov	r1, r6
   d5084:	f001 f835 	bl	d60f2 <memset>
   d5088:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d508a:	4f0e      	ldr	r7, [pc, #56]	; (d50c4 <_Z22__fetch_global_Serial1v+0x70>)
   d508c:	6839      	ldr	r1, [r7, #0]
   d508e:	f011 0601 	ands.w	r6, r1, #1
   d5092:	d111      	bne.n	d50b8 <_Z22__fetch_global_Serial1v+0x64>
   d5094:	4638      	mov	r0, r7
   d5096:	f7ff f806 	bl	d40a6 <__cxa_guard_acquire>
   d509a:	b168      	cbz	r0, d50b8 <_Z22__fetch_global_Serial1v+0x64>
   d509c:	6822      	ldr	r2, [r4, #0]
   d509e:	682b      	ldr	r3, [r5, #0]
   d50a0:	4809      	ldr	r0, [pc, #36]	; (d50c8 <_Z22__fetch_global_Serial1v+0x74>)
   d50a2:	4631      	mov	r1, r6
   d50a4:	f7ff ffbc 	bl	d5020 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d50a8:	4638      	mov	r0, r7
   d50aa:	f7ff f801 	bl	d40b0 <__cxa_guard_release>
   d50ae:	4a07      	ldr	r2, [pc, #28]	; (d50cc <_Z22__fetch_global_Serial1v+0x78>)
   d50b0:	4907      	ldr	r1, [pc, #28]	; (d50d0 <_Z22__fetch_global_Serial1v+0x7c>)
   d50b2:	4805      	ldr	r0, [pc, #20]	; (d50c8 <_Z22__fetch_global_Serial1v+0x74>)
   d50b4:	f000 fac2 	bl	d563c <__aeabi_atexit>
#endif
	return serial1;
}
   d50b8:	4803      	ldr	r0, [pc, #12]	; (d50c8 <_Z22__fetch_global_Serial1v+0x74>)
   d50ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d50bc:	2003e530 	.word	0x2003e530
   d50c0:	2003e528 	.word	0x2003e528
   d50c4:	2003e52c 	.word	0x2003e52c
   d50c8:	2003e514 	.word	0x2003e514
   d50cc:	2003e4a8 	.word	0x2003e4a8
   d50d0:	000d4f9d 	.word	0x000d4f9d

000d50d4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d50d4:	4770      	bx	lr

000d50d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d50d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50d8:	4606      	mov	r6, r0
   d50da:	4615      	mov	r5, r2
   d50dc:	460c      	mov	r4, r1
   d50de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d50e0:	42bc      	cmp	r4, r7
   d50e2:	d006      	beq.n	d50f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d50e4:	6833      	ldr	r3, [r6, #0]
   d50e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d50ea:	689b      	ldr	r3, [r3, #8]
   d50ec:	4630      	mov	r0, r6
   d50ee:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d50f0:	e7f6      	b.n	d50e0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d50f2:	4628      	mov	r0, r5
   d50f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50f6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d50f6:	2200      	movs	r2, #0
   d50f8:	7c00      	ldrb	r0, [r0, #16]
   d50fa:	f7ff bb13 	b.w	d4724 <HAL_I2C_Write_Data>

000d50fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d50fe:	2100      	movs	r1, #0
   d5100:	7c00      	ldrb	r0, [r0, #16]
   d5102:	f7ff bb17 	b.w	d4734 <HAL_I2C_Available_Data>

000d5106 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5106:	2100      	movs	r1, #0
   d5108:	7c00      	ldrb	r0, [r0, #16]
   d510a:	f7ff bb1b 	b.w	d4744 <HAL_I2C_Read_Data>

000d510e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d510e:	2100      	movs	r1, #0
   d5110:	7c00      	ldrb	r0, [r0, #16]
   d5112:	f7ff bb1f 	b.w	d4754 <HAL_I2C_Peek_Data>

000d5116 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5116:	2100      	movs	r1, #0
   d5118:	7c00      	ldrb	r0, [r0, #16]
   d511a:	f7ff bb23 	b.w	d4764 <HAL_I2C_Flush_Data>

000d511e <_ZN7TwoWireD0Ev>:
   d511e:	b510      	push	{r4, lr}
   d5120:	2114      	movs	r1, #20
   d5122:	4604      	mov	r4, r0
   d5124:	f000 fa8f 	bl	d5646 <_ZdlPvj>
   d5128:	4620      	mov	r0, r4
   d512a:	bd10      	pop	{r4, pc}

000d512c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d512c:	b510      	push	{r4, lr}
   d512e:	4604      	mov	r4, r0
   d5130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5134:	4608      	mov	r0, r1
   d5136:	60a3      	str	r3, [r4, #8]
   d5138:	2100      	movs	r1, #0
   d513a:	4b04      	ldr	r3, [pc, #16]	; (d514c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d513c:	7420      	strb	r0, [r4, #16]
   d513e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5140:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5142:	f7ff fb1f 	bl	d4784 <HAL_I2C_Init>

}
   d5146:	4620      	mov	r0, r4
   d5148:	bd10      	pop	{r4, pc}
   d514a:	bf00      	nop
   d514c:	000d63a8 	.word	0x000d63a8

000d5150 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5150:	2100      	movs	r1, #0
   d5152:	7c00      	ldrb	r0, [r0, #16]
   d5154:	f7ff bb0e 	b.w	d4774 <HAL_I2C_Is_Enabled>

000d5158 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5158:	2200      	movs	r2, #0
   d515a:	4611      	mov	r1, r2
   d515c:	6840      	ldr	r0, [r0, #4]
   d515e:	f7ff bbad 	b.w	d48bc <network_listening>

000d5162 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5162:	2200      	movs	r2, #0
   d5164:	4611      	mov	r1, r2
   d5166:	6840      	ldr	r0, [r0, #4]
   d5168:	f7ff bbc0 	b.w	d48ec <network_get_listen_timeout>

000d516c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d516c:	2200      	movs	r2, #0
   d516e:	6840      	ldr	r0, [r0, #4]
   d5170:	f7ff bbb4 	b.w	d48dc <network_set_listen_timeout>

000d5174 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5174:	2200      	movs	r2, #0
   d5176:	f081 0101 	eor.w	r1, r1, #1
   d517a:	6840      	ldr	r0, [r0, #4]
   d517c:	f7ff bb96 	b.w	d48ac <network_listen>

000d5180 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5180:	2300      	movs	r3, #0
   d5182:	461a      	mov	r2, r3
   d5184:	2101      	movs	r1, #1
   d5186:	6840      	ldr	r0, [r0, #4]
   d5188:	f7ff bb88 	b.w	d489c <network_off>

000d518c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d518c:	2300      	movs	r3, #0
   d518e:	461a      	mov	r2, r3
   d5190:	4619      	mov	r1, r3
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff bb7a 	b.w	d488c <network_on>

000d5198 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5198:	2200      	movs	r2, #0
   d519a:	4611      	mov	r1, r2
   d519c:	6840      	ldr	r0, [r0, #4]
   d519e:	f7ff bb6d 	b.w	d487c <network_ready>

000d51a2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d51a2:	2200      	movs	r2, #0
   d51a4:	4611      	mov	r1, r2
   d51a6:	6840      	ldr	r0, [r0, #4]
   d51a8:	f7ff bb58 	b.w	d485c <network_connecting>

000d51ac <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51ac:	2200      	movs	r2, #0
   d51ae:	2102      	movs	r1, #2
   d51b0:	6840      	ldr	r0, [r0, #4]
   d51b2:	f7ff bb5b 	b.w	d486c <network_disconnect>

000d51b6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d51b6:	2300      	movs	r3, #0
   d51b8:	461a      	mov	r2, r3
   d51ba:	6840      	ldr	r0, [r0, #4]
   d51bc:	f7ff bb46 	b.w	d484c <network_connect>

000d51c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d51c0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51c2:	4605      	mov	r5, r0
   d51c4:	b188      	cbz	r0, d51ea <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d51c6:	6804      	ldr	r4, [r0, #0]
   d51c8:	b14c      	cbz	r4, d51de <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d51ca:	68a3      	ldr	r3, [r4, #8]
   d51cc:	b11b      	cbz	r3, d51d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51ce:	2203      	movs	r2, #3
   d51d0:	4621      	mov	r1, r4
   d51d2:	4620      	mov	r0, r4
   d51d4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51d6:	2110      	movs	r1, #16
   d51d8:	4620      	mov	r0, r4
   d51da:	f000 fa34 	bl	d5646 <_ZdlPvj>
   d51de:	4628      	mov	r0, r5
   d51e0:	2114      	movs	r1, #20
      }
   d51e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51e6:	f000 ba2e 	b.w	d5646 <_ZdlPvj>
   d51ea:	bd38      	pop	{r3, r4, r5, pc}

000d51ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d51ec:	b110      	cbz	r0, d51f4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d51ee:	6803      	ldr	r3, [r0, #0]
   d51f0:	685b      	ldr	r3, [r3, #4]
   d51f2:	4718      	bx	r3
   d51f4:	4770      	bx	lr

000d51f6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d51f6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d51f8:	6803      	ldr	r3, [r0, #0]
   d51fa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d51fc:	b1bb      	cbz	r3, d522e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d51fe:	6858      	ldr	r0, [r3, #4]
   d5200:	f7ff fa20 	bl	d4644 <os_thread_is_current>
   d5204:	b978      	cbnz	r0, d5226 <_ZN6ThreadD1Ev+0x30>
   d5206:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5208:	7c5a      	ldrb	r2, [r3, #17]
   d520a:	b912      	cbnz	r2, d5212 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d520c:	6858      	ldr	r0, [r3, #4]
   d520e:	f7ff fa21 	bl	d4654 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5212:	6823      	ldr	r3, [r4, #0]
   d5214:	6858      	ldr	r0, [r3, #4]
   d5216:	f7ff fa25 	bl	d4664 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d521a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d521c:	2300      	movs	r3, #0
   d521e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5220:	b128      	cbz	r0, d522e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5222:	f7ff ffcd 	bl	d51c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5226:	6820      	ldr	r0, [r4, #0]
   d5228:	b108      	cbz	r0, d522e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d522a:	f7ff ffc9 	bl	d51c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d522e:	4620      	mov	r0, r4
   d5230:	bd10      	pop	{r4, pc}
	...

000d5234 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5234:	b538      	push	{r3, r4, r5, lr}
   d5236:	4b0c      	ldr	r3, [pc, #48]	; (d5268 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5238:	6003      	str	r3, [r0, #0]
   d523a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d523c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5240:	b108      	cbz	r0, d5246 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5242:	f7fe ff2e 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5246:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d524a:	b135      	cbz	r5, d525a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d524c:	4628      	mov	r0, r5
   d524e:	f7ff ffd2 	bl	d51f6 <_ZN6ThreadD1Ev>
   d5252:	2104      	movs	r1, #4
   d5254:	4628      	mov	r0, r5
   d5256:	f000 f9f6 	bl	d5646 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d525a:	68a0      	ldr	r0, [r4, #8]
   d525c:	b108      	cbz	r0, d5262 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d525e:	f7ff ffc5 	bl	d51ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5262:	4620      	mov	r0, r4
   d5264:	bd38      	pop	{r3, r4, r5, pc}
   d5266:	bf00      	nop
   d5268:	000d63d0 	.word	0x000d63d0

000d526c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d526c:	b538      	push	{r3, r4, r5, lr}
   d526e:	4c0e      	ldr	r4, [pc, #56]	; (d52a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5270:	4b0e      	ldr	r3, [pc, #56]	; (d52ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5272:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5274:	2500      	movs	r5, #0
   d5276:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5278:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d527c:	6063      	str	r3, [r4, #4]
   d527e:	60a5      	str	r5, [r4, #8]
   d5280:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5284:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5288:	f7ff f9fc 	bl	d4684 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d528c:	4b08      	ldr	r3, [pc, #32]	; (d52b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d528e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5292:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5296:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5298:	4620      	mov	r0, r4
   d529a:	4a06      	ldr	r2, [pc, #24]	; (d52b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d529c:	4906      	ldr	r1, [pc, #24]	; (d52b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d52a2:	f000 b9cb 	b.w	d563c <__aeabi_atexit>
   d52a6:	bf00      	nop
   d52a8:	2003e534 	.word	0x2003e534
   d52ac:	000d6438 	.word	0x000d6438
   d52b0:	000d63d0 	.word	0x000d63d0
   d52b4:	2003e4a8 	.word	0x2003e4a8
   d52b8:	000d5235 	.word	0x000d5235

000d52bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d52bc:	2200      	movs	r2, #0
   d52be:	4611      	mov	r1, r2
   d52c0:	6840      	ldr	r0, [r0, #4]
   d52c2:	f7ff badb 	b.w	d487c <network_ready>

000d52c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d52c6:	2200      	movs	r2, #0
   d52c8:	4611      	mov	r1, r2
   d52ca:	6840      	ldr	r0, [r0, #4]
   d52cc:	f7ff baf6 	b.w	d48bc <network_listening>

000d52d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52d0:	2200      	movs	r2, #0
   d52d2:	4611      	mov	r1, r2
   d52d4:	6840      	ldr	r0, [r0, #4]
   d52d6:	f7ff bb09 	b.w	d48ec <network_get_listen_timeout>

000d52da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52da:	2200      	movs	r2, #0
   d52dc:	6840      	ldr	r0, [r0, #4]
   d52de:	f7ff bafd 	b.w	d48dc <network_set_listen_timeout>

000d52e2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52e2:	2200      	movs	r2, #0
   d52e4:	f081 0101 	eor.w	r1, r1, #1
   d52e8:	6840      	ldr	r0, [r0, #4]
   d52ea:	f7ff badf 	b.w	d48ac <network_listen>

000d52ee <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d52ee:	2300      	movs	r3, #0
   d52f0:	461a      	mov	r2, r3
   d52f2:	4619      	mov	r1, r3
   d52f4:	6840      	ldr	r0, [r0, #4]
   d52f6:	f7ff bad1 	b.w	d489c <network_off>

000d52fa <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d52fa:	2300      	movs	r3, #0
   d52fc:	461a      	mov	r2, r3
   d52fe:	4619      	mov	r1, r3
   d5300:	6840      	ldr	r0, [r0, #4]
   d5302:	f7ff bac3 	b.w	d488c <network_on>

000d5306 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5306:	2200      	movs	r2, #0
   d5308:	4611      	mov	r1, r2
   d530a:	6840      	ldr	r0, [r0, #4]
   d530c:	f7ff baa6 	b.w	d485c <network_connecting>

000d5310 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5310:	2200      	movs	r2, #0
   d5312:	2102      	movs	r1, #2
   d5314:	6840      	ldr	r0, [r0, #4]
   d5316:	f7ff baa9 	b.w	d486c <network_disconnect>

000d531a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d531a:	2300      	movs	r3, #0
   d531c:	461a      	mov	r2, r3
   d531e:	6840      	ldr	r0, [r0, #4]
   d5320:	f7ff ba94 	b.w	d484c <network_connect>

000d5324 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5324:	4b02      	ldr	r3, [pc, #8]	; (d5330 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5326:	2204      	movs	r2, #4
   d5328:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d532a:	4a02      	ldr	r2, [pc, #8]	; (d5334 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d532c:	601a      	str	r2, [r3, #0]
   d532e:	4770      	bx	lr
   d5330:	2003e708 	.word	0x2003e708
   d5334:	000d6404 	.word	0x000d6404

000d5338 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5338:	2300      	movs	r3, #0
   d533a:	461a      	mov	r2, r3
   d533c:	6840      	ldr	r0, [r0, #4]
   d533e:	f7ff ba85 	b.w	d484c <network_connect>

000d5342 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5342:	2200      	movs	r2, #0
   d5344:	2102      	movs	r1, #2
   d5346:	6840      	ldr	r0, [r0, #4]
   d5348:	f7ff ba90 	b.w	d486c <network_disconnect>

000d534c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d534c:	2200      	movs	r2, #0
   d534e:	4611      	mov	r1, r2
   d5350:	6840      	ldr	r0, [r0, #4]
   d5352:	f7ff ba83 	b.w	d485c <network_connecting>

000d5356 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5356:	2200      	movs	r2, #0
   d5358:	4611      	mov	r1, r2
   d535a:	6840      	ldr	r0, [r0, #4]
   d535c:	f7ff ba8e 	b.w	d487c <network_ready>

000d5360 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5360:	2300      	movs	r3, #0
   d5362:	461a      	mov	r2, r3
   d5364:	4619      	mov	r1, r3
   d5366:	6840      	ldr	r0, [r0, #4]
   d5368:	f7ff ba90 	b.w	d488c <network_on>

000d536c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d536c:	2300      	movs	r3, #0
   d536e:	461a      	mov	r2, r3
   d5370:	4619      	mov	r1, r3
   d5372:	6840      	ldr	r0, [r0, #4]
   d5374:	f7ff ba92 	b.w	d489c <network_off>

000d5378 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5378:	2200      	movs	r2, #0
   d537a:	f081 0101 	eor.w	r1, r1, #1
   d537e:	6840      	ldr	r0, [r0, #4]
   d5380:	f7ff ba94 	b.w	d48ac <network_listen>

000d5384 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5384:	2200      	movs	r2, #0
   d5386:	6840      	ldr	r0, [r0, #4]
   d5388:	f7ff baa8 	b.w	d48dc <network_set_listen_timeout>

000d538c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d538c:	2200      	movs	r2, #0
   d538e:	4611      	mov	r1, r2
   d5390:	6840      	ldr	r0, [r0, #4]
   d5392:	f7ff baab 	b.w	d48ec <network_get_listen_timeout>

000d5396 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5396:	2200      	movs	r2, #0
   d5398:	4611      	mov	r1, r2
   d539a:	6840      	ldr	r0, [r0, #4]
   d539c:	f7ff ba8e 	b.w	d48bc <network_listening>

000d53a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d53a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53a4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d53a6:	b095      	sub	sp, #84	; 0x54
   d53a8:	4616      	mov	r6, r2
   d53aa:	460d      	mov	r5, r1
   d53ac:	4607      	mov	r7, r0
    IPAddress addr;
   d53ae:	f7ff fd35 	bl	d4e1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d53b2:	4621      	mov	r1, r4
   d53b4:	2220      	movs	r2, #32
   d53b6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d53b8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d53ba:	f000 fe9a 	bl	d60f2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d53be:	2340      	movs	r3, #64	; 0x40
   d53c0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d53c2:	4621      	mov	r1, r4
   d53c4:	466b      	mov	r3, sp
   d53c6:	aa0c      	add	r2, sp, #48	; 0x30
   d53c8:	4630      	mov	r0, r6
   d53ca:	f7ff f8db 	bl	d4584 <netdb_getaddrinfo>
    if (!r) {
   d53ce:	4604      	mov	r4, r0
   d53d0:	2800      	cmp	r0, #0
   d53d2:	d144      	bne.n	d545e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d53d4:	4602      	mov	r2, r0
   d53d6:	2101      	movs	r1, #1
   d53d8:	6868      	ldr	r0, [r5, #4]
   d53da:	f7ff fa4f 	bl	d487c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d53de:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d53e0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d53e2:	4622      	mov	r2, r4
   d53e4:	6868      	ldr	r0, [r5, #4]
   d53e6:	f7ff fa49 	bl	d487c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d53ea:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d53ec:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d53ee:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d53f0:	2e00      	cmp	r6, #0
   d53f2:	d034      	beq.n	d545e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d53f4:	2900      	cmp	r1, #0
   d53f6:	d132      	bne.n	d545e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d53f8:	6873      	ldr	r3, [r6, #4]
   d53fa:	2b02      	cmp	r3, #2
   d53fc:	d002      	beq.n	d5404 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d53fe:	2b0a      	cmp	r3, #10
   d5400:	d009      	beq.n	d5416 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5402:	e02a      	b.n	d545a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5404:	f1b8 0f00 	cmp.w	r8, #0
   d5408:	d027      	beq.n	d545a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d540a:	6971      	ldr	r1, [r6, #20]
   d540c:	4638      	mov	r0, r7
   d540e:	3104      	adds	r1, #4
   d5410:	f7ff fd31 	bl	d4e76 <_ZN9IPAddressaSEPKh>
   d5414:	e020      	b.n	d5458 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5416:	f1b9 0f00 	cmp.w	r9, #0
   d541a:	d01e      	beq.n	d545a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d541c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d541e:	2211      	movs	r2, #17
   d5420:	a801      	add	r0, sp, #4
   d5422:	f000 fe66 	bl	d60f2 <memset>
                    a.v = 6;
   d5426:	2306      	movs	r3, #6
   d5428:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d542c:	ad01      	add	r5, sp, #4
   d542e:	f104 0308 	add.w	r3, r4, #8
   d5432:	3418      	adds	r4, #24
   d5434:	6818      	ldr	r0, [r3, #0]
   d5436:	6859      	ldr	r1, [r3, #4]
   d5438:	462a      	mov	r2, r5
   d543a:	c203      	stmia	r2!, {r0, r1}
   d543c:	3308      	adds	r3, #8
   d543e:	42a3      	cmp	r3, r4
   d5440:	4615      	mov	r5, r2
   d5442:	d1f7      	bne.n	d5434 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5444:	a901      	add	r1, sp, #4
   d5446:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5448:	ad07      	add	r5, sp, #28
   d544a:	f7ff fcf5 	bl	d4e38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d544e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5450:	1d3c      	adds	r4, r7, #4
   d5452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5454:	682b      	ldr	r3, [r5, #0]
   d5456:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5458:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d545a:	69f6      	ldr	r6, [r6, #28]
   d545c:	e7c8      	b.n	d53f0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d545e:	9800      	ldr	r0, [sp, #0]
   d5460:	f7ff f888 	bl	d4574 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5464:	4638      	mov	r0, r7
   d5466:	b015      	add	sp, #84	; 0x54
   d5468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d546c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d546c:	4b02      	ldr	r3, [pc, #8]	; (d5478 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d546e:	4a03      	ldr	r2, [pc, #12]	; (d547c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5470:	601a      	str	r2, [r3, #0]
   d5472:	2200      	movs	r2, #0
   d5474:	605a      	str	r2, [r3, #4]
   d5476:	4770      	bx	lr
   d5478:	2003e710 	.word	0x2003e710
   d547c:	000d6438 	.word	0x000d6438

000d5480 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5480:	b510      	push	{r4, lr}
   d5482:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5484:	480f      	ldr	r0, [pc, #60]	; (d54c4 <pinAvailable+0x44>)
   d5486:	f7ff fac3 	bl	d4a10 <_ZN8SPIClass9isEnabledEv>
   d548a:	b128      	cbz	r0, d5498 <pinAvailable+0x18>
   d548c:	f1a4 030b 	sub.w	r3, r4, #11
   d5490:	2b02      	cmp	r3, #2
   d5492:	d801      	bhi.n	d5498 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5494:	2000      	movs	r0, #0
   d5496:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5498:	f000 f8b0 	bl	d55fc <_Z19__fetch_global_Wirev>
   d549c:	f7ff fe58 	bl	d5150 <_ZN7TwoWire9isEnabledEv>
   d54a0:	b108      	cbz	r0, d54a6 <pinAvailable+0x26>
   d54a2:	2c01      	cmp	r4, #1
   d54a4:	d9f6      	bls.n	d5494 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d54a6:	f7ff fdd5 	bl	d5054 <_Z22__fetch_global_Serial1v>
   d54aa:	f7ff fdcf 	bl	d504c <_ZN11USARTSerial9isEnabledEv>
   d54ae:	b118      	cbz	r0, d54b8 <pinAvailable+0x38>
   d54b0:	f1a4 0309 	sub.w	r3, r4, #9
   d54b4:	2b01      	cmp	r3, #1
   d54b6:	d9ed      	bls.n	d5494 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d54b8:	2c23      	cmp	r4, #35	; 0x23
   d54ba:	bf8c      	ite	hi
   d54bc:	2000      	movhi	r0, #0
   d54be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d54c0:	bd10      	pop	{r4, pc}
   d54c2:	bf00      	nop
   d54c4:	2003e718 	.word	0x2003e718

000d54c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d54c8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d54ca:	b538      	push	{r3, r4, r5, lr}
   d54cc:	4604      	mov	r4, r0
   d54ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d54d0:	d80a      	bhi.n	d54e8 <pinMode+0x20>
   d54d2:	29ff      	cmp	r1, #255	; 0xff
   d54d4:	d008      	beq.n	d54e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d54d6:	f7ff ffd3 	bl	d5480 <pinAvailable>
   d54da:	b128      	cbz	r0, d54e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d54dc:	4629      	mov	r1, r5
   d54de:	4620      	mov	r0, r4
}
   d54e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d54e4:	f7ff b866 	b.w	d45b4 <HAL_Pin_Mode>
   d54e8:	bd38      	pop	{r3, r4, r5, pc}

000d54ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d54ea:	b538      	push	{r3, r4, r5, lr}
   d54ec:	4604      	mov	r4, r0
   d54ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d54f0:	f7ff f868 	bl	d45c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d54f4:	28ff      	cmp	r0, #255	; 0xff
   d54f6:	d010      	beq.n	d551a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d54f8:	2806      	cmp	r0, #6
   d54fa:	d804      	bhi.n	d5506 <digitalWrite+0x1c>
   d54fc:	234d      	movs	r3, #77	; 0x4d
   d54fe:	fa23 f000 	lsr.w	r0, r3, r0
   d5502:	07c3      	lsls	r3, r0, #31
   d5504:	d409      	bmi.n	d551a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5506:	4620      	mov	r0, r4
   d5508:	f7ff ffba 	bl	d5480 <pinAvailable>
   d550c:	b128      	cbz	r0, d551a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d550e:	4629      	mov	r1, r5
   d5510:	4620      	mov	r0, r4
}
   d5512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5516:	f7ff b85d 	b.w	d45d4 <HAL_GPIO_Write>
   d551a:	bd38      	pop	{r3, r4, r5, pc}

000d551c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d551c:	b510      	push	{r4, lr}
   d551e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5520:	f7ff f850 	bl	d45c4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5524:	3804      	subs	r0, #4
   d5526:	b2c0      	uxtb	r0, r0
   d5528:	2801      	cmp	r0, #1
   d552a:	d908      	bls.n	d553e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d552c:	4620      	mov	r0, r4
   d552e:	f7ff ffa7 	bl	d5480 <pinAvailable>
   d5532:	b120      	cbz	r0, d553e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5534:	4620      	mov	r0, r4
}
   d5536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d553a:	f7ff b853 	b.w	d45e4 <HAL_GPIO_Read>
}
   d553e:	2000      	movs	r0, #0
   d5540:	bd10      	pop	{r4, pc}

000d5542 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5542:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5544:	b510      	push	{r4, lr}
   d5546:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5548:	bf9c      	itt	ls
   d554a:	340e      	addls	r4, #14
   d554c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d554e:	4620      	mov	r0, r4
   d5550:	f7ff ff96 	bl	d5480 <pinAvailable>
   d5554:	b150      	cbz	r0, d556c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5556:	2103      	movs	r1, #3
   d5558:	4620      	mov	r0, r4
   d555a:	f7ff f823 	bl	d45a4 <HAL_Validate_Pin_Function>
   d555e:	2803      	cmp	r0, #3
   d5560:	d104      	bne.n	d556c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5562:	4620      	mov	r0, r4
}
   d5564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5568:	f7ff b844 	b.w	d45f4 <HAL_ADC_Read>
}
   d556c:	2000      	movs	r0, #0
   d556e:	bd10      	pop	{r4, pc}

000d5570 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d5570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5574:	4690      	mov	r8, r2
   d5576:	461e      	mov	r6, r3
   d5578:	2407      	movs	r4, #7
   d557a:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d557c:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d557e:	f1b8 0f00 	cmp.w	r8, #0
   d5582:	d104      	bne.n	d558e <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5584:	f1c4 0107 	rsb	r1, r4, #7
   d5588:	fa46 f101 	asr.w	r1, r6, r1
   d558c:	e001      	b.n	d5592 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d558e:	fa46 f104 	asr.w	r1, r6, r4
   d5592:	f001 0101 	and.w	r1, r1, #1
   d5596:	4638      	mov	r0, r7
   d5598:	f7ff ffa7 	bl	d54ea <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d559c:	2101      	movs	r1, #1
   d559e:	4628      	mov	r0, r5
   d55a0:	f7ff ffa3 	bl	d54ea <digitalWrite>
    digitalWrite(clockPin, LOW);
   d55a4:	2100      	movs	r1, #0
   d55a6:	4628      	mov	r0, r5
   d55a8:	f7ff ff9f 	bl	d54ea <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d55ac:	f114 34ff 	adds.w	r4, r4, #4294967295
   d55b0:	d2e5      	bcs.n	d557e <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d55b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d55b8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d55b8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d55ba:	4c0c      	ldr	r4, [pc, #48]	; (d55ec <_GLOBAL__sub_I_SPI+0x34>)
   d55bc:	4e0c      	ldr	r6, [pc, #48]	; (d55f0 <_GLOBAL__sub_I_SPI+0x38>)
   d55be:	4d0d      	ldr	r5, [pc, #52]	; (d55f4 <_GLOBAL__sub_I_SPI+0x3c>)
   d55c0:	2100      	movs	r1, #0
   d55c2:	4620      	mov	r0, r4
   d55c4:	f7ff fa10 	bl	d49e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d55c8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d55ca:	4c0b      	ldr	r4, [pc, #44]	; (d55f8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d55cc:	4632      	mov	r2, r6
   d55ce:	4629      	mov	r1, r5
   d55d0:	f000 f834 	bl	d563c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d55d4:	2101      	movs	r1, #1
   d55d6:	4620      	mov	r0, r4
   d55d8:	f7ff fa06 	bl	d49e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d55dc:	4632      	mov	r2, r6
   d55de:	4629      	mov	r1, r5
   d55e0:	4620      	mov	r0, r4
   d55e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d55e6:	f000 b829 	b.w	d563c <__aeabi_atexit>
   d55ea:	bf00      	nop
   d55ec:	2003e718 	.word	0x2003e718
   d55f0:	2003e4a8 	.word	0x2003e4a8
   d55f4:	000d49d9 	.word	0x000d49d9
   d55f8:	2003e728 	.word	0x2003e728

000d55fc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d55fc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d55fe:	4d0b      	ldr	r5, [pc, #44]	; (d562c <_Z19__fetch_global_Wirev+0x30>)
   d5600:	6829      	ldr	r1, [r5, #0]
   d5602:	f011 0401 	ands.w	r4, r1, #1
   d5606:	d10f      	bne.n	d5628 <_Z19__fetch_global_Wirev+0x2c>
   d5608:	4628      	mov	r0, r5
   d560a:	f7fe fd4c 	bl	d40a6 <__cxa_guard_acquire>
   d560e:	b158      	cbz	r0, d5628 <_Z19__fetch_global_Wirev+0x2c>
   d5610:	4621      	mov	r1, r4
   d5612:	4807      	ldr	r0, [pc, #28]	; (d5630 <_Z19__fetch_global_Wirev+0x34>)
   d5614:	f7ff fd8a 	bl	d512c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5618:	4628      	mov	r0, r5
   d561a:	f7fe fd49 	bl	d40b0 <__cxa_guard_release>
   d561e:	4a05      	ldr	r2, [pc, #20]	; (d5634 <_Z19__fetch_global_Wirev+0x38>)
   d5620:	4905      	ldr	r1, [pc, #20]	; (d5638 <_Z19__fetch_global_Wirev+0x3c>)
   d5622:	4803      	ldr	r0, [pc, #12]	; (d5630 <_Z19__fetch_global_Wirev+0x34>)
   d5624:	f000 f80a 	bl	d563c <__aeabi_atexit>
	return wire;
}
   d5628:	4801      	ldr	r0, [pc, #4]	; (d5630 <_Z19__fetch_global_Wirev+0x34>)
   d562a:	bd38      	pop	{r3, r4, r5, pc}
   d562c:	2003e73c 	.word	0x2003e73c
   d5630:	2003e740 	.word	0x2003e740
   d5634:	2003e4a8 	.word	0x2003e4a8
   d5638:	000d50d5 	.word	0x000d50d5

000d563c <__aeabi_atexit>:
   d563c:	460b      	mov	r3, r1
   d563e:	4601      	mov	r1, r0
   d5640:	4618      	mov	r0, r3
   d5642:	f000 bd3d 	b.w	d60c0 <__cxa_atexit>

000d5646 <_ZdlPvj>:
   d5646:	f7fe bd2a 	b.w	d409e <_ZdlPv>
	...

000d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d564c:	4b18      	ldr	r3, [pc, #96]	; (d56b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d564e:	681a      	ldr	r2, [r3, #0]
   d5650:	07d1      	lsls	r1, r2, #31
   d5652:	bf5c      	itt	pl
   d5654:	2201      	movpl	r2, #1
   d5656:	601a      	strpl	r2, [r3, #0]
   d5658:	4b16      	ldr	r3, [pc, #88]	; (d56b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d565a:	681a      	ldr	r2, [r3, #0]
   d565c:	07d2      	lsls	r2, r2, #31
   d565e:	bf5c      	itt	pl
   d5660:	2201      	movpl	r2, #1
   d5662:	601a      	strpl	r2, [r3, #0]
   d5664:	4b14      	ldr	r3, [pc, #80]	; (d56b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5666:	681a      	ldr	r2, [r3, #0]
   d5668:	07d0      	lsls	r0, r2, #31
   d566a:	bf5c      	itt	pl
   d566c:	2201      	movpl	r2, #1
   d566e:	601a      	strpl	r2, [r3, #0]
   d5670:	4b12      	ldr	r3, [pc, #72]	; (d56bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5672:	681a      	ldr	r2, [r3, #0]
   d5674:	07d1      	lsls	r1, r2, #31
   d5676:	bf5c      	itt	pl
   d5678:	2201      	movpl	r2, #1
   d567a:	601a      	strpl	r2, [r3, #0]
   d567c:	4b10      	ldr	r3, [pc, #64]	; (d56c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d567e:	681a      	ldr	r2, [r3, #0]
   d5680:	07d2      	lsls	r2, r2, #31
   d5682:	bf5c      	itt	pl
   d5684:	2201      	movpl	r2, #1
   d5686:	601a      	strpl	r2, [r3, #0]
   d5688:	4b0e      	ldr	r3, [pc, #56]	; (d56c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d568a:	681a      	ldr	r2, [r3, #0]
   d568c:	07d0      	lsls	r0, r2, #31
   d568e:	bf5c      	itt	pl
   d5690:	2201      	movpl	r2, #1
   d5692:	601a      	strpl	r2, [r3, #0]
   d5694:	4b0c      	ldr	r3, [pc, #48]	; (d56c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5696:	681a      	ldr	r2, [r3, #0]
   d5698:	07d1      	lsls	r1, r2, #31
   d569a:	bf5c      	itt	pl
   d569c:	2201      	movpl	r2, #1
   d569e:	601a      	strpl	r2, [r3, #0]
   d56a0:	4b0a      	ldr	r3, [pc, #40]	; (d56cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d56a2:	681a      	ldr	r2, [r3, #0]
   d56a4:	07d2      	lsls	r2, r2, #31
   d56a6:	bf5c      	itt	pl
   d56a8:	2201      	movpl	r2, #1
   d56aa:	601a      	strpl	r2, [r3, #0]
   d56ac:	4770      	bx	lr
   d56ae:	bf00      	nop
   d56b0:	2003e770 	.word	0x2003e770
   d56b4:	2003e76c 	.word	0x2003e76c
   d56b8:	2003e768 	.word	0x2003e768
   d56bc:	2003e764 	.word	0x2003e764
   d56c0:	2003e760 	.word	0x2003e760
   d56c4:	2003e75c 	.word	0x2003e75c
   d56c8:	2003e758 	.word	0x2003e758
   d56cc:	2003e754 	.word	0x2003e754

000d56d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d56d0:	4b24      	ldr	r3, [pc, #144]	; (d5764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	07d0      	lsls	r0, r2, #31
   d56d6:	bf5c      	itt	pl
   d56d8:	2201      	movpl	r2, #1
   d56da:	601a      	strpl	r2, [r3, #0]
   d56dc:	4b22      	ldr	r3, [pc, #136]	; (d5768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d1      	lsls	r1, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4b20      	ldr	r3, [pc, #128]	; (d576c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d56ea:	681a      	ldr	r2, [r3, #0]
   d56ec:	07d2      	lsls	r2, r2, #31
   d56ee:	bf5c      	itt	pl
   d56f0:	2201      	movpl	r2, #1
   d56f2:	601a      	strpl	r2, [r3, #0]
   d56f4:	4b1e      	ldr	r3, [pc, #120]	; (d5770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d56f6:	681a      	ldr	r2, [r3, #0]
   d56f8:	07d0      	lsls	r0, r2, #31
   d56fa:	bf5c      	itt	pl
   d56fc:	2201      	movpl	r2, #1
   d56fe:	601a      	strpl	r2, [r3, #0]
   d5700:	4b1c      	ldr	r3, [pc, #112]	; (d5774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	07d1      	lsls	r1, r2, #31
   d5706:	bf5c      	itt	pl
   d5708:	2201      	movpl	r2, #1
   d570a:	601a      	strpl	r2, [r3, #0]
   d570c:	4b1a      	ldr	r3, [pc, #104]	; (d5778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d570e:	681a      	ldr	r2, [r3, #0]
   d5710:	07d2      	lsls	r2, r2, #31
   d5712:	bf5c      	itt	pl
   d5714:	2201      	movpl	r2, #1
   d5716:	601a      	strpl	r2, [r3, #0]
   d5718:	4b18      	ldr	r3, [pc, #96]	; (d577c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d571a:	681a      	ldr	r2, [r3, #0]
   d571c:	07d0      	lsls	r0, r2, #31
   d571e:	bf5c      	itt	pl
   d5720:	2201      	movpl	r2, #1
   d5722:	601a      	strpl	r2, [r3, #0]
   d5724:	4b16      	ldr	r3, [pc, #88]	; (d5780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5726:	681a      	ldr	r2, [r3, #0]
   d5728:	07d1      	lsls	r1, r2, #31
   d572a:	bf5c      	itt	pl
   d572c:	2201      	movpl	r2, #1
   d572e:	601a      	strpl	r2, [r3, #0]
   d5730:	4b14      	ldr	r3, [pc, #80]	; (d5784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5732:	681a      	ldr	r2, [r3, #0]
   d5734:	07d2      	lsls	r2, r2, #31
   d5736:	bf5c      	itt	pl
   d5738:	2201      	movpl	r2, #1
   d573a:	601a      	strpl	r2, [r3, #0]
   d573c:	4b12      	ldr	r3, [pc, #72]	; (d5788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d573e:	681a      	ldr	r2, [r3, #0]
   d5740:	07d0      	lsls	r0, r2, #31
   d5742:	bf5c      	itt	pl
   d5744:	2201      	movpl	r2, #1
   d5746:	601a      	strpl	r2, [r3, #0]
   d5748:	4b10      	ldr	r3, [pc, #64]	; (d578c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d574a:	681a      	ldr	r2, [r3, #0]
   d574c:	07d1      	lsls	r1, r2, #31
   d574e:	bf5c      	itt	pl
   d5750:	2201      	movpl	r2, #1
   d5752:	601a      	strpl	r2, [r3, #0]
   d5754:	4b0e      	ldr	r3, [pc, #56]	; (d5790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5756:	681a      	ldr	r2, [r3, #0]
   d5758:	07d2      	lsls	r2, r2, #31
   d575a:	bf5c      	itt	pl
   d575c:	2201      	movpl	r2, #1
   d575e:	601a      	strpl	r2, [r3, #0]
   d5760:	4770      	bx	lr
   d5762:	bf00      	nop
   d5764:	2003e7a0 	.word	0x2003e7a0
   d5768:	2003e79c 	.word	0x2003e79c
   d576c:	2003e798 	.word	0x2003e798
   d5770:	2003e794 	.word	0x2003e794
   d5774:	2003e790 	.word	0x2003e790
   d5778:	2003e78c 	.word	0x2003e78c
   d577c:	2003e788 	.word	0x2003e788
   d5780:	2003e784 	.word	0x2003e784
   d5784:	2003e780 	.word	0x2003e780
   d5788:	2003e77c 	.word	0x2003e77c
   d578c:	2003e778 	.word	0x2003e778
   d5790:	2003e774 	.word	0x2003e774

000d5794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5794:	4b24      	ldr	r3, [pc, #144]	; (d5828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5796:	681a      	ldr	r2, [r3, #0]
   d5798:	07d0      	lsls	r0, r2, #31
   d579a:	bf5c      	itt	pl
   d579c:	2201      	movpl	r2, #1
   d579e:	601a      	strpl	r2, [r3, #0]
   d57a0:	4b22      	ldr	r3, [pc, #136]	; (d582c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d57a2:	681a      	ldr	r2, [r3, #0]
   d57a4:	07d1      	lsls	r1, r2, #31
   d57a6:	bf5c      	itt	pl
   d57a8:	2201      	movpl	r2, #1
   d57aa:	601a      	strpl	r2, [r3, #0]
   d57ac:	4b20      	ldr	r3, [pc, #128]	; (d5830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d57ae:	681a      	ldr	r2, [r3, #0]
   d57b0:	07d2      	lsls	r2, r2, #31
   d57b2:	bf5c      	itt	pl
   d57b4:	2201      	movpl	r2, #1
   d57b6:	601a      	strpl	r2, [r3, #0]
   d57b8:	4b1e      	ldr	r3, [pc, #120]	; (d5834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d57ba:	681a      	ldr	r2, [r3, #0]
   d57bc:	07d0      	lsls	r0, r2, #31
   d57be:	bf5c      	itt	pl
   d57c0:	2201      	movpl	r2, #1
   d57c2:	601a      	strpl	r2, [r3, #0]
   d57c4:	4b1c      	ldr	r3, [pc, #112]	; (d5838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d57c6:	681a      	ldr	r2, [r3, #0]
   d57c8:	07d1      	lsls	r1, r2, #31
   d57ca:	bf5c      	itt	pl
   d57cc:	2201      	movpl	r2, #1
   d57ce:	601a      	strpl	r2, [r3, #0]
   d57d0:	4b1a      	ldr	r3, [pc, #104]	; (d583c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d57d2:	681a      	ldr	r2, [r3, #0]
   d57d4:	07d2      	lsls	r2, r2, #31
   d57d6:	bf5c      	itt	pl
   d57d8:	2201      	movpl	r2, #1
   d57da:	601a      	strpl	r2, [r3, #0]
   d57dc:	4b18      	ldr	r3, [pc, #96]	; (d5840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d57de:	681a      	ldr	r2, [r3, #0]
   d57e0:	07d0      	lsls	r0, r2, #31
   d57e2:	bf5c      	itt	pl
   d57e4:	2201      	movpl	r2, #1
   d57e6:	601a      	strpl	r2, [r3, #0]
   d57e8:	4b16      	ldr	r3, [pc, #88]	; (d5844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d57ea:	681a      	ldr	r2, [r3, #0]
   d57ec:	07d1      	lsls	r1, r2, #31
   d57ee:	bf5c      	itt	pl
   d57f0:	2201      	movpl	r2, #1
   d57f2:	601a      	strpl	r2, [r3, #0]
   d57f4:	4b14      	ldr	r3, [pc, #80]	; (d5848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d57f6:	681a      	ldr	r2, [r3, #0]
   d57f8:	07d2      	lsls	r2, r2, #31
   d57fa:	bf5c      	itt	pl
   d57fc:	2201      	movpl	r2, #1
   d57fe:	601a      	strpl	r2, [r3, #0]
   d5800:	4b12      	ldr	r3, [pc, #72]	; (d584c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5802:	681a      	ldr	r2, [r3, #0]
   d5804:	07d0      	lsls	r0, r2, #31
   d5806:	bf5c      	itt	pl
   d5808:	2201      	movpl	r2, #1
   d580a:	601a      	strpl	r2, [r3, #0]
   d580c:	4b10      	ldr	r3, [pc, #64]	; (d5850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d580e:	681a      	ldr	r2, [r3, #0]
   d5810:	07d1      	lsls	r1, r2, #31
   d5812:	bf5c      	itt	pl
   d5814:	2201      	movpl	r2, #1
   d5816:	601a      	strpl	r2, [r3, #0]
   d5818:	4b0e      	ldr	r3, [pc, #56]	; (d5854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d581a:	681a      	ldr	r2, [r3, #0]
   d581c:	07d2      	lsls	r2, r2, #31
   d581e:	bf5c      	itt	pl
   d5820:	2201      	movpl	r2, #1
   d5822:	601a      	strpl	r2, [r3, #0]
   d5824:	4770      	bx	lr
   d5826:	bf00      	nop
   d5828:	2003e7d0 	.word	0x2003e7d0
   d582c:	2003e7cc 	.word	0x2003e7cc
   d5830:	2003e7c8 	.word	0x2003e7c8
   d5834:	2003e7c4 	.word	0x2003e7c4
   d5838:	2003e7c0 	.word	0x2003e7c0
   d583c:	2003e7bc 	.word	0x2003e7bc
   d5840:	2003e7b8 	.word	0x2003e7b8
   d5844:	2003e7b4 	.word	0x2003e7b4
   d5848:	2003e7b0 	.word	0x2003e7b0
   d584c:	2003e7ac 	.word	0x2003e7ac
   d5850:	2003e7a8 	.word	0x2003e7a8
   d5854:	2003e7a4 	.word	0x2003e7a4

000d5858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5858:	4b18      	ldr	r3, [pc, #96]	; (d58bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d585a:	681a      	ldr	r2, [r3, #0]
   d585c:	07d1      	lsls	r1, r2, #31
   d585e:	bf5c      	itt	pl
   d5860:	2201      	movpl	r2, #1
   d5862:	601a      	strpl	r2, [r3, #0]
   d5864:	4b16      	ldr	r3, [pc, #88]	; (d58c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5866:	681a      	ldr	r2, [r3, #0]
   d5868:	07d2      	lsls	r2, r2, #31
   d586a:	bf5c      	itt	pl
   d586c:	2201      	movpl	r2, #1
   d586e:	601a      	strpl	r2, [r3, #0]
   d5870:	4b14      	ldr	r3, [pc, #80]	; (d58c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5872:	681a      	ldr	r2, [r3, #0]
   d5874:	07d0      	lsls	r0, r2, #31
   d5876:	bf5c      	itt	pl
   d5878:	2201      	movpl	r2, #1
   d587a:	601a      	strpl	r2, [r3, #0]
   d587c:	4b12      	ldr	r3, [pc, #72]	; (d58c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d587e:	681a      	ldr	r2, [r3, #0]
   d5880:	07d1      	lsls	r1, r2, #31
   d5882:	bf5c      	itt	pl
   d5884:	2201      	movpl	r2, #1
   d5886:	601a      	strpl	r2, [r3, #0]
   d5888:	4b10      	ldr	r3, [pc, #64]	; (d58cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d588a:	681a      	ldr	r2, [r3, #0]
   d588c:	07d2      	lsls	r2, r2, #31
   d588e:	bf5c      	itt	pl
   d5890:	2201      	movpl	r2, #1
   d5892:	601a      	strpl	r2, [r3, #0]
   d5894:	4b0e      	ldr	r3, [pc, #56]	; (d58d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5896:	681a      	ldr	r2, [r3, #0]
   d5898:	07d0      	lsls	r0, r2, #31
   d589a:	bf5c      	itt	pl
   d589c:	2201      	movpl	r2, #1
   d589e:	601a      	strpl	r2, [r3, #0]
   d58a0:	4b0c      	ldr	r3, [pc, #48]	; (d58d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d58a2:	681a      	ldr	r2, [r3, #0]
   d58a4:	07d1      	lsls	r1, r2, #31
   d58a6:	bf5c      	itt	pl
   d58a8:	2201      	movpl	r2, #1
   d58aa:	601a      	strpl	r2, [r3, #0]
   d58ac:	4b0a      	ldr	r3, [pc, #40]	; (d58d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d58ae:	681a      	ldr	r2, [r3, #0]
   d58b0:	07d2      	lsls	r2, r2, #31
   d58b2:	bf5c      	itt	pl
   d58b4:	2201      	movpl	r2, #1
   d58b6:	601a      	strpl	r2, [r3, #0]
   d58b8:	4770      	bx	lr
   d58ba:	bf00      	nop
   d58bc:	2003e7f0 	.word	0x2003e7f0
   d58c0:	2003e7ec 	.word	0x2003e7ec
   d58c4:	2003e7e8 	.word	0x2003e7e8
   d58c8:	2003e7e4 	.word	0x2003e7e4
   d58cc:	2003e7e0 	.word	0x2003e7e0
   d58d0:	2003e7dc 	.word	0x2003e7dc
   d58d4:	2003e7d8 	.word	0x2003e7d8
   d58d8:	2003e7d4 	.word	0x2003e7d4

000d58dc <__aeabi_drsub>:
   d58dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d58e0:	e002      	b.n	d58e8 <__adddf3>
   d58e2:	bf00      	nop

000d58e4 <__aeabi_dsub>:
   d58e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d58e8 <__adddf3>:
   d58e8:	b530      	push	{r4, r5, lr}
   d58ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d58ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d58f2:	ea94 0f05 	teq	r4, r5
   d58f6:	bf08      	it	eq
   d58f8:	ea90 0f02 	teqeq	r0, r2
   d58fc:	bf1f      	itttt	ne
   d58fe:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5902:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5906:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d590a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d590e:	f000 80e2 	beq.w	d5ad6 <__adddf3+0x1ee>
   d5912:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5916:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d591a:	bfb8      	it	lt
   d591c:	426d      	neglt	r5, r5
   d591e:	dd0c      	ble.n	d593a <__adddf3+0x52>
   d5920:	442c      	add	r4, r5
   d5922:	ea80 0202 	eor.w	r2, r0, r2
   d5926:	ea81 0303 	eor.w	r3, r1, r3
   d592a:	ea82 0000 	eor.w	r0, r2, r0
   d592e:	ea83 0101 	eor.w	r1, r3, r1
   d5932:	ea80 0202 	eor.w	r2, r0, r2
   d5936:	ea81 0303 	eor.w	r3, r1, r3
   d593a:	2d36      	cmp	r5, #54	; 0x36
   d593c:	bf88      	it	hi
   d593e:	bd30      	pophi	{r4, r5, pc}
   d5940:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5944:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5948:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d594c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5950:	d002      	beq.n	d5958 <__adddf3+0x70>
   d5952:	4240      	negs	r0, r0
   d5954:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5958:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d595c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5960:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5964:	d002      	beq.n	d596c <__adddf3+0x84>
   d5966:	4252      	negs	r2, r2
   d5968:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d596c:	ea94 0f05 	teq	r4, r5
   d5970:	f000 80a7 	beq.w	d5ac2 <__adddf3+0x1da>
   d5974:	f1a4 0401 	sub.w	r4, r4, #1
   d5978:	f1d5 0e20 	rsbs	lr, r5, #32
   d597c:	db0d      	blt.n	d599a <__adddf3+0xb2>
   d597e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5982:	fa22 f205 	lsr.w	r2, r2, r5
   d5986:	1880      	adds	r0, r0, r2
   d5988:	f141 0100 	adc.w	r1, r1, #0
   d598c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5990:	1880      	adds	r0, r0, r2
   d5992:	fa43 f305 	asr.w	r3, r3, r5
   d5996:	4159      	adcs	r1, r3
   d5998:	e00e      	b.n	d59b8 <__adddf3+0xd0>
   d599a:	f1a5 0520 	sub.w	r5, r5, #32
   d599e:	f10e 0e20 	add.w	lr, lr, #32
   d59a2:	2a01      	cmp	r2, #1
   d59a4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d59a8:	bf28      	it	cs
   d59aa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d59ae:	fa43 f305 	asr.w	r3, r3, r5
   d59b2:	18c0      	adds	r0, r0, r3
   d59b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d59b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59bc:	d507      	bpl.n	d59ce <__adddf3+0xe6>
   d59be:	f04f 0e00 	mov.w	lr, #0
   d59c2:	f1dc 0c00 	rsbs	ip, ip, #0
   d59c6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d59ca:	eb6e 0101 	sbc.w	r1, lr, r1
   d59ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d59d2:	d31b      	bcc.n	d5a0c <__adddf3+0x124>
   d59d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d59d8:	d30c      	bcc.n	d59f4 <__adddf3+0x10c>
   d59da:	0849      	lsrs	r1, r1, #1
   d59dc:	ea5f 0030 	movs.w	r0, r0, rrx
   d59e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d59e4:	f104 0401 	add.w	r4, r4, #1
   d59e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d59ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d59f0:	f080 809a 	bcs.w	d5b28 <__adddf3+0x240>
   d59f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d59f8:	bf08      	it	eq
   d59fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d59fe:	f150 0000 	adcs.w	r0, r0, #0
   d5a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5a06:	ea41 0105 	orr.w	r1, r1, r5
   d5a0a:	bd30      	pop	{r4, r5, pc}
   d5a0c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5a10:	4140      	adcs	r0, r0
   d5a12:	eb41 0101 	adc.w	r1, r1, r1
   d5a16:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5a1a:	f1a4 0401 	sub.w	r4, r4, #1
   d5a1e:	d1e9      	bne.n	d59f4 <__adddf3+0x10c>
   d5a20:	f091 0f00 	teq	r1, #0
   d5a24:	bf04      	itt	eq
   d5a26:	4601      	moveq	r1, r0
   d5a28:	2000      	moveq	r0, #0
   d5a2a:	fab1 f381 	clz	r3, r1
   d5a2e:	bf08      	it	eq
   d5a30:	3320      	addeq	r3, #32
   d5a32:	f1a3 030b 	sub.w	r3, r3, #11
   d5a36:	f1b3 0220 	subs.w	r2, r3, #32
   d5a3a:	da0c      	bge.n	d5a56 <__adddf3+0x16e>
   d5a3c:	320c      	adds	r2, #12
   d5a3e:	dd08      	ble.n	d5a52 <__adddf3+0x16a>
   d5a40:	f102 0c14 	add.w	ip, r2, #20
   d5a44:	f1c2 020c 	rsb	r2, r2, #12
   d5a48:	fa01 f00c 	lsl.w	r0, r1, ip
   d5a4c:	fa21 f102 	lsr.w	r1, r1, r2
   d5a50:	e00c      	b.n	d5a6c <__adddf3+0x184>
   d5a52:	f102 0214 	add.w	r2, r2, #20
   d5a56:	bfd8      	it	le
   d5a58:	f1c2 0c20 	rsble	ip, r2, #32
   d5a5c:	fa01 f102 	lsl.w	r1, r1, r2
   d5a60:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5a64:	bfdc      	itt	le
   d5a66:	ea41 010c 	orrle.w	r1, r1, ip
   d5a6a:	4090      	lslle	r0, r2
   d5a6c:	1ae4      	subs	r4, r4, r3
   d5a6e:	bfa2      	ittt	ge
   d5a70:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5a74:	4329      	orrge	r1, r5
   d5a76:	bd30      	popge	{r4, r5, pc}
   d5a78:	ea6f 0404 	mvn.w	r4, r4
   d5a7c:	3c1f      	subs	r4, #31
   d5a7e:	da1c      	bge.n	d5aba <__adddf3+0x1d2>
   d5a80:	340c      	adds	r4, #12
   d5a82:	dc0e      	bgt.n	d5aa2 <__adddf3+0x1ba>
   d5a84:	f104 0414 	add.w	r4, r4, #20
   d5a88:	f1c4 0220 	rsb	r2, r4, #32
   d5a8c:	fa20 f004 	lsr.w	r0, r0, r4
   d5a90:	fa01 f302 	lsl.w	r3, r1, r2
   d5a94:	ea40 0003 	orr.w	r0, r0, r3
   d5a98:	fa21 f304 	lsr.w	r3, r1, r4
   d5a9c:	ea45 0103 	orr.w	r1, r5, r3
   d5aa0:	bd30      	pop	{r4, r5, pc}
   d5aa2:	f1c4 040c 	rsb	r4, r4, #12
   d5aa6:	f1c4 0220 	rsb	r2, r4, #32
   d5aaa:	fa20 f002 	lsr.w	r0, r0, r2
   d5aae:	fa01 f304 	lsl.w	r3, r1, r4
   d5ab2:	ea40 0003 	orr.w	r0, r0, r3
   d5ab6:	4629      	mov	r1, r5
   d5ab8:	bd30      	pop	{r4, r5, pc}
   d5aba:	fa21 f004 	lsr.w	r0, r1, r4
   d5abe:	4629      	mov	r1, r5
   d5ac0:	bd30      	pop	{r4, r5, pc}
   d5ac2:	f094 0f00 	teq	r4, #0
   d5ac6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5aca:	bf06      	itte	eq
   d5acc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5ad0:	3401      	addeq	r4, #1
   d5ad2:	3d01      	subne	r5, #1
   d5ad4:	e74e      	b.n	d5974 <__adddf3+0x8c>
   d5ad6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5ada:	bf18      	it	ne
   d5adc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5ae0:	d029      	beq.n	d5b36 <__adddf3+0x24e>
   d5ae2:	ea94 0f05 	teq	r4, r5
   d5ae6:	bf08      	it	eq
   d5ae8:	ea90 0f02 	teqeq	r0, r2
   d5aec:	d005      	beq.n	d5afa <__adddf3+0x212>
   d5aee:	ea54 0c00 	orrs.w	ip, r4, r0
   d5af2:	bf04      	itt	eq
   d5af4:	4619      	moveq	r1, r3
   d5af6:	4610      	moveq	r0, r2
   d5af8:	bd30      	pop	{r4, r5, pc}
   d5afa:	ea91 0f03 	teq	r1, r3
   d5afe:	bf1e      	ittt	ne
   d5b00:	2100      	movne	r1, #0
   d5b02:	2000      	movne	r0, #0
   d5b04:	bd30      	popne	{r4, r5, pc}
   d5b06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5b0a:	d105      	bne.n	d5b18 <__adddf3+0x230>
   d5b0c:	0040      	lsls	r0, r0, #1
   d5b0e:	4149      	adcs	r1, r1
   d5b10:	bf28      	it	cs
   d5b12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5b16:	bd30      	pop	{r4, r5, pc}
   d5b18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5b1c:	bf3c      	itt	cc
   d5b1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5b22:	bd30      	popcc	{r4, r5, pc}
   d5b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5b2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5b30:	f04f 0000 	mov.w	r0, #0
   d5b34:	bd30      	pop	{r4, r5, pc}
   d5b36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5b3a:	bf1a      	itte	ne
   d5b3c:	4619      	movne	r1, r3
   d5b3e:	4610      	movne	r0, r2
   d5b40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5b44:	bf1c      	itt	ne
   d5b46:	460b      	movne	r3, r1
   d5b48:	4602      	movne	r2, r0
   d5b4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5b4e:	bf06      	itte	eq
   d5b50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5b54:	ea91 0f03 	teqeq	r1, r3
   d5b58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5b5c:	bd30      	pop	{r4, r5, pc}
   d5b5e:	bf00      	nop

000d5b60 <__aeabi_ui2d>:
   d5b60:	f090 0f00 	teq	r0, #0
   d5b64:	bf04      	itt	eq
   d5b66:	2100      	moveq	r1, #0
   d5b68:	4770      	bxeq	lr
   d5b6a:	b530      	push	{r4, r5, lr}
   d5b6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b74:	f04f 0500 	mov.w	r5, #0
   d5b78:	f04f 0100 	mov.w	r1, #0
   d5b7c:	e750      	b.n	d5a20 <__adddf3+0x138>
   d5b7e:	bf00      	nop

000d5b80 <__aeabi_i2d>:
   d5b80:	f090 0f00 	teq	r0, #0
   d5b84:	bf04      	itt	eq
   d5b86:	2100      	moveq	r1, #0
   d5b88:	4770      	bxeq	lr
   d5b8a:	b530      	push	{r4, r5, lr}
   d5b8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b90:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5b98:	bf48      	it	mi
   d5b9a:	4240      	negmi	r0, r0
   d5b9c:	f04f 0100 	mov.w	r1, #0
   d5ba0:	e73e      	b.n	d5a20 <__adddf3+0x138>
   d5ba2:	bf00      	nop

000d5ba4 <__aeabi_f2d>:
   d5ba4:	0042      	lsls	r2, r0, #1
   d5ba6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5baa:	ea4f 0131 	mov.w	r1, r1, rrx
   d5bae:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5bb2:	bf1f      	itttt	ne
   d5bb4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5bb8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5bbc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5bc0:	4770      	bxne	lr
   d5bc2:	f092 0f00 	teq	r2, #0
   d5bc6:	bf14      	ite	ne
   d5bc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5bcc:	4770      	bxeq	lr
   d5bce:	b530      	push	{r4, r5, lr}
   d5bd0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5bd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5bd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5bdc:	e720      	b.n	d5a20 <__adddf3+0x138>
   d5bde:	bf00      	nop

000d5be0 <__aeabi_ul2d>:
   d5be0:	ea50 0201 	orrs.w	r2, r0, r1
   d5be4:	bf08      	it	eq
   d5be6:	4770      	bxeq	lr
   d5be8:	b530      	push	{r4, r5, lr}
   d5bea:	f04f 0500 	mov.w	r5, #0
   d5bee:	e00a      	b.n	d5c06 <__aeabi_l2d+0x16>

000d5bf0 <__aeabi_l2d>:
   d5bf0:	ea50 0201 	orrs.w	r2, r0, r1
   d5bf4:	bf08      	it	eq
   d5bf6:	4770      	bxeq	lr
   d5bf8:	b530      	push	{r4, r5, lr}
   d5bfa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5bfe:	d502      	bpl.n	d5c06 <__aeabi_l2d+0x16>
   d5c00:	4240      	negs	r0, r0
   d5c02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5c06:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5c0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5c0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5c12:	f43f aedc 	beq.w	d59ce <__adddf3+0xe6>
   d5c16:	f04f 0203 	mov.w	r2, #3
   d5c1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5c1e:	bf18      	it	ne
   d5c20:	3203      	addne	r2, #3
   d5c22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5c26:	bf18      	it	ne
   d5c28:	3203      	addne	r2, #3
   d5c2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5c2e:	f1c2 0320 	rsb	r3, r2, #32
   d5c32:	fa00 fc03 	lsl.w	ip, r0, r3
   d5c36:	fa20 f002 	lsr.w	r0, r0, r2
   d5c3a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5c3e:	ea40 000e 	orr.w	r0, r0, lr
   d5c42:	fa21 f102 	lsr.w	r1, r1, r2
   d5c46:	4414      	add	r4, r2
   d5c48:	e6c1      	b.n	d59ce <__adddf3+0xe6>
   d5c4a:	bf00      	nop

000d5c4c <__aeabi_dmul>:
   d5c4c:	b570      	push	{r4, r5, r6, lr}
   d5c4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5c52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5c56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5c5a:	bf1d      	ittte	ne
   d5c5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c60:	ea94 0f0c 	teqne	r4, ip
   d5c64:	ea95 0f0c 	teqne	r5, ip
   d5c68:	f000 f8de 	bleq	d5e28 <__aeabi_dmul+0x1dc>
   d5c6c:	442c      	add	r4, r5
   d5c6e:	ea81 0603 	eor.w	r6, r1, r3
   d5c72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5c76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5c7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5c7e:	bf18      	it	ne
   d5c80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5c8c:	d038      	beq.n	d5d00 <__aeabi_dmul+0xb4>
   d5c8e:	fba0 ce02 	umull	ip, lr, r0, r2
   d5c92:	f04f 0500 	mov.w	r5, #0
   d5c96:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5c9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5c9e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5ca2:	f04f 0600 	mov.w	r6, #0
   d5ca6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5caa:	f09c 0f00 	teq	ip, #0
   d5cae:	bf18      	it	ne
   d5cb0:	f04e 0e01 	orrne.w	lr, lr, #1
   d5cb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5cb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5cbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5cc0:	d204      	bcs.n	d5ccc <__aeabi_dmul+0x80>
   d5cc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5cc6:	416d      	adcs	r5, r5
   d5cc8:	eb46 0606 	adc.w	r6, r6, r6
   d5ccc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5cd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5cd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5cd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5cdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5ce0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ce4:	bf88      	it	hi
   d5ce6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5cea:	d81e      	bhi.n	d5d2a <__aeabi_dmul+0xde>
   d5cec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5cf0:	bf08      	it	eq
   d5cf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5cf6:	f150 0000 	adcs.w	r0, r0, #0
   d5cfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5cfe:	bd70      	pop	{r4, r5, r6, pc}
   d5d00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5d04:	ea46 0101 	orr.w	r1, r6, r1
   d5d08:	ea40 0002 	orr.w	r0, r0, r2
   d5d0c:	ea81 0103 	eor.w	r1, r1, r3
   d5d10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5d14:	bfc2      	ittt	gt
   d5d16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5d1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5d1e:	bd70      	popgt	{r4, r5, r6, pc}
   d5d20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d24:	f04f 0e00 	mov.w	lr, #0
   d5d28:	3c01      	subs	r4, #1
   d5d2a:	f300 80ab 	bgt.w	d5e84 <__aeabi_dmul+0x238>
   d5d2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5d32:	bfde      	ittt	le
   d5d34:	2000      	movle	r0, #0
   d5d36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5d3a:	bd70      	pople	{r4, r5, r6, pc}
   d5d3c:	f1c4 0400 	rsb	r4, r4, #0
   d5d40:	3c20      	subs	r4, #32
   d5d42:	da35      	bge.n	d5db0 <__aeabi_dmul+0x164>
   d5d44:	340c      	adds	r4, #12
   d5d46:	dc1b      	bgt.n	d5d80 <__aeabi_dmul+0x134>
   d5d48:	f104 0414 	add.w	r4, r4, #20
   d5d4c:	f1c4 0520 	rsb	r5, r4, #32
   d5d50:	fa00 f305 	lsl.w	r3, r0, r5
   d5d54:	fa20 f004 	lsr.w	r0, r0, r4
   d5d58:	fa01 f205 	lsl.w	r2, r1, r5
   d5d5c:	ea40 0002 	orr.w	r0, r0, r2
   d5d60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5d64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5d68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5d6c:	fa21 f604 	lsr.w	r6, r1, r4
   d5d70:	eb42 0106 	adc.w	r1, r2, r6
   d5d74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d78:	bf08      	it	eq
   d5d7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d7e:	bd70      	pop	{r4, r5, r6, pc}
   d5d80:	f1c4 040c 	rsb	r4, r4, #12
   d5d84:	f1c4 0520 	rsb	r5, r4, #32
   d5d88:	fa00 f304 	lsl.w	r3, r0, r4
   d5d8c:	fa20 f005 	lsr.w	r0, r0, r5
   d5d90:	fa01 f204 	lsl.w	r2, r1, r4
   d5d94:	ea40 0002 	orr.w	r0, r0, r2
   d5d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5da0:	f141 0100 	adc.w	r1, r1, #0
   d5da4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5da8:	bf08      	it	eq
   d5daa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5dae:	bd70      	pop	{r4, r5, r6, pc}
   d5db0:	f1c4 0520 	rsb	r5, r4, #32
   d5db4:	fa00 f205 	lsl.w	r2, r0, r5
   d5db8:	ea4e 0e02 	orr.w	lr, lr, r2
   d5dbc:	fa20 f304 	lsr.w	r3, r0, r4
   d5dc0:	fa01 f205 	lsl.w	r2, r1, r5
   d5dc4:	ea43 0302 	orr.w	r3, r3, r2
   d5dc8:	fa21 f004 	lsr.w	r0, r1, r4
   d5dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dd0:	fa21 f204 	lsr.w	r2, r1, r4
   d5dd4:	ea20 0002 	bic.w	r0, r0, r2
   d5dd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5de0:	bf08      	it	eq
   d5de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5de6:	bd70      	pop	{r4, r5, r6, pc}
   d5de8:	f094 0f00 	teq	r4, #0
   d5dec:	d10f      	bne.n	d5e0e <__aeabi_dmul+0x1c2>
   d5dee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5df2:	0040      	lsls	r0, r0, #1
   d5df4:	eb41 0101 	adc.w	r1, r1, r1
   d5df8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5dfc:	bf08      	it	eq
   d5dfe:	3c01      	subeq	r4, #1
   d5e00:	d0f7      	beq.n	d5df2 <__aeabi_dmul+0x1a6>
   d5e02:	ea41 0106 	orr.w	r1, r1, r6
   d5e06:	f095 0f00 	teq	r5, #0
   d5e0a:	bf18      	it	ne
   d5e0c:	4770      	bxne	lr
   d5e0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5e12:	0052      	lsls	r2, r2, #1
   d5e14:	eb43 0303 	adc.w	r3, r3, r3
   d5e18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5e1c:	bf08      	it	eq
   d5e1e:	3d01      	subeq	r5, #1
   d5e20:	d0f7      	beq.n	d5e12 <__aeabi_dmul+0x1c6>
   d5e22:	ea43 0306 	orr.w	r3, r3, r6
   d5e26:	4770      	bx	lr
   d5e28:	ea94 0f0c 	teq	r4, ip
   d5e2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5e30:	bf18      	it	ne
   d5e32:	ea95 0f0c 	teqne	r5, ip
   d5e36:	d00c      	beq.n	d5e52 <__aeabi_dmul+0x206>
   d5e38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e3c:	bf18      	it	ne
   d5e3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e42:	d1d1      	bne.n	d5de8 <__aeabi_dmul+0x19c>
   d5e44:	ea81 0103 	eor.w	r1, r1, r3
   d5e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e4c:	f04f 0000 	mov.w	r0, #0
   d5e50:	bd70      	pop	{r4, r5, r6, pc}
   d5e52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5e56:	bf06      	itte	eq
   d5e58:	4610      	moveq	r0, r2
   d5e5a:	4619      	moveq	r1, r3
   d5e5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5e60:	d019      	beq.n	d5e96 <__aeabi_dmul+0x24a>
   d5e62:	ea94 0f0c 	teq	r4, ip
   d5e66:	d102      	bne.n	d5e6e <__aeabi_dmul+0x222>
   d5e68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5e6c:	d113      	bne.n	d5e96 <__aeabi_dmul+0x24a>
   d5e6e:	ea95 0f0c 	teq	r5, ip
   d5e72:	d105      	bne.n	d5e80 <__aeabi_dmul+0x234>
   d5e74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5e78:	bf1c      	itt	ne
   d5e7a:	4610      	movne	r0, r2
   d5e7c:	4619      	movne	r1, r3
   d5e7e:	d10a      	bne.n	d5e96 <__aeabi_dmul+0x24a>
   d5e80:	ea81 0103 	eor.w	r1, r1, r3
   d5e84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5e88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5e8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e90:	f04f 0000 	mov.w	r0, #0
   d5e94:	bd70      	pop	{r4, r5, r6, pc}
   d5e96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5e9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5e9e:	bd70      	pop	{r4, r5, r6, pc}

000d5ea0 <__aeabi_ddiv>:
   d5ea0:	b570      	push	{r4, r5, r6, lr}
   d5ea2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ea6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5eaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5eae:	bf1d      	ittte	ne
   d5eb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5eb4:	ea94 0f0c 	teqne	r4, ip
   d5eb8:	ea95 0f0c 	teqne	r5, ip
   d5ebc:	f000 f8a7 	bleq	d600e <__aeabi_ddiv+0x16e>
   d5ec0:	eba4 0405 	sub.w	r4, r4, r5
   d5ec4:	ea81 0e03 	eor.w	lr, r1, r3
   d5ec8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ecc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ed0:	f000 8088 	beq.w	d5fe4 <__aeabi_ddiv+0x144>
   d5ed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5ed8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5edc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5ee0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5ee4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5ee8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5eec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5ef0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5ef4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5ef8:	429d      	cmp	r5, r3
   d5efa:	bf08      	it	eq
   d5efc:	4296      	cmpeq	r6, r2
   d5efe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5f02:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5f06:	d202      	bcs.n	d5f0e <__aeabi_ddiv+0x6e>
   d5f08:	085b      	lsrs	r3, r3, #1
   d5f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f0e:	1ab6      	subs	r6, r6, r2
   d5f10:	eb65 0503 	sbc.w	r5, r5, r3
   d5f14:	085b      	lsrs	r3, r3, #1
   d5f16:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5f1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5f22:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f26:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f2a:	bf22      	ittt	cs
   d5f2c:	1ab6      	subcs	r6, r6, r2
   d5f2e:	4675      	movcs	r5, lr
   d5f30:	ea40 000c 	orrcs.w	r0, r0, ip
   d5f34:	085b      	lsrs	r3, r3, #1
   d5f36:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f3a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f42:	bf22      	ittt	cs
   d5f44:	1ab6      	subcs	r6, r6, r2
   d5f46:	4675      	movcs	r5, lr
   d5f48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5f4c:	085b      	lsrs	r3, r3, #1
   d5f4e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f52:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f56:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f5a:	bf22      	ittt	cs
   d5f5c:	1ab6      	subcs	r6, r6, r2
   d5f5e:	4675      	movcs	r5, lr
   d5f60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5f64:	085b      	lsrs	r3, r3, #1
   d5f66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5f72:	bf22      	ittt	cs
   d5f74:	1ab6      	subcs	r6, r6, r2
   d5f76:	4675      	movcs	r5, lr
   d5f78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5f7c:	ea55 0e06 	orrs.w	lr, r5, r6
   d5f80:	d018      	beq.n	d5fb4 <__aeabi_ddiv+0x114>
   d5f82:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5f86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5f8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5f8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5f92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5f96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5f9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5f9e:	d1c0      	bne.n	d5f22 <__aeabi_ddiv+0x82>
   d5fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fa4:	d10b      	bne.n	d5fbe <__aeabi_ddiv+0x11e>
   d5fa6:	ea41 0100 	orr.w	r1, r1, r0
   d5faa:	f04f 0000 	mov.w	r0, #0
   d5fae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5fb2:	e7b6      	b.n	d5f22 <__aeabi_ddiv+0x82>
   d5fb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5fb8:	bf04      	itt	eq
   d5fba:	4301      	orreq	r1, r0
   d5fbc:	2000      	moveq	r0, #0
   d5fbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5fc2:	bf88      	it	hi
   d5fc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5fc8:	f63f aeaf 	bhi.w	d5d2a <__aeabi_dmul+0xde>
   d5fcc:	ebb5 0c03 	subs.w	ip, r5, r3
   d5fd0:	bf04      	itt	eq
   d5fd2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5fd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5fda:	f150 0000 	adcs.w	r0, r0, #0
   d5fde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5fe2:	bd70      	pop	{r4, r5, r6, pc}
   d5fe4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5fe8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5fec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5ff0:	bfc2      	ittt	gt
   d5ff2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5ff6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5ffa:	bd70      	popgt	{r4, r5, r6, pc}
   d5ffc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6000:	f04f 0e00 	mov.w	lr, #0
   d6004:	3c01      	subs	r4, #1
   d6006:	e690      	b.n	d5d2a <__aeabi_dmul+0xde>
   d6008:	ea45 0e06 	orr.w	lr, r5, r6
   d600c:	e68d      	b.n	d5d2a <__aeabi_dmul+0xde>
   d600e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6012:	ea94 0f0c 	teq	r4, ip
   d6016:	bf08      	it	eq
   d6018:	ea95 0f0c 	teqeq	r5, ip
   d601c:	f43f af3b 	beq.w	d5e96 <__aeabi_dmul+0x24a>
   d6020:	ea94 0f0c 	teq	r4, ip
   d6024:	d10a      	bne.n	d603c <__aeabi_ddiv+0x19c>
   d6026:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d602a:	f47f af34 	bne.w	d5e96 <__aeabi_dmul+0x24a>
   d602e:	ea95 0f0c 	teq	r5, ip
   d6032:	f47f af25 	bne.w	d5e80 <__aeabi_dmul+0x234>
   d6036:	4610      	mov	r0, r2
   d6038:	4619      	mov	r1, r3
   d603a:	e72c      	b.n	d5e96 <__aeabi_dmul+0x24a>
   d603c:	ea95 0f0c 	teq	r5, ip
   d6040:	d106      	bne.n	d6050 <__aeabi_ddiv+0x1b0>
   d6042:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6046:	f43f aefd 	beq.w	d5e44 <__aeabi_dmul+0x1f8>
   d604a:	4610      	mov	r0, r2
   d604c:	4619      	mov	r1, r3
   d604e:	e722      	b.n	d5e96 <__aeabi_dmul+0x24a>
   d6050:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6054:	bf18      	it	ne
   d6056:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d605a:	f47f aec5 	bne.w	d5de8 <__aeabi_dmul+0x19c>
   d605e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6062:	f47f af0d 	bne.w	d5e80 <__aeabi_dmul+0x234>
   d6066:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d606a:	f47f aeeb 	bne.w	d5e44 <__aeabi_dmul+0x1f8>
   d606e:	e712      	b.n	d5e96 <__aeabi_dmul+0x24a>

000d6070 <__aeabi_d2iz>:
   d6070:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6074:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6078:	d215      	bcs.n	d60a6 <__aeabi_d2iz+0x36>
   d607a:	d511      	bpl.n	d60a0 <__aeabi_d2iz+0x30>
   d607c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6084:	d912      	bls.n	d60ac <__aeabi_d2iz+0x3c>
   d6086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d608a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d608e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6092:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6096:	fa23 f002 	lsr.w	r0, r3, r2
   d609a:	bf18      	it	ne
   d609c:	4240      	negne	r0, r0
   d609e:	4770      	bx	lr
   d60a0:	f04f 0000 	mov.w	r0, #0
   d60a4:	4770      	bx	lr
   d60a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d60aa:	d105      	bne.n	d60b8 <__aeabi_d2iz+0x48>
   d60ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d60b0:	bf08      	it	eq
   d60b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d60b6:	4770      	bx	lr
   d60b8:	f04f 0000 	mov.w	r0, #0
   d60bc:	4770      	bx	lr
   d60be:	bf00      	nop

000d60c0 <__cxa_atexit>:
   d60c0:	b510      	push	{r4, lr}
   d60c2:	4c05      	ldr	r4, [pc, #20]	; (d60d8 <__cxa_atexit+0x18>)
   d60c4:	4613      	mov	r3, r2
   d60c6:	b12c      	cbz	r4, d60d4 <__cxa_atexit+0x14>
   d60c8:	460a      	mov	r2, r1
   d60ca:	4601      	mov	r1, r0
   d60cc:	2002      	movs	r0, #2
   d60ce:	f3af 8000 	nop.w
   d60d2:	bd10      	pop	{r4, pc}
   d60d4:	4620      	mov	r0, r4
   d60d6:	bd10      	pop	{r4, pc}
   d60d8:	00000000 	.word	0x00000000

000d60dc <memcpy>:
   d60dc:	b510      	push	{r4, lr}
   d60de:	1e43      	subs	r3, r0, #1
   d60e0:	440a      	add	r2, r1
   d60e2:	4291      	cmp	r1, r2
   d60e4:	d004      	beq.n	d60f0 <memcpy+0x14>
   d60e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60ea:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60ee:	e7f8      	b.n	d60e2 <memcpy+0x6>
   d60f0:	bd10      	pop	{r4, pc}

000d60f2 <memset>:
   d60f2:	4402      	add	r2, r0
   d60f4:	4603      	mov	r3, r0
   d60f6:	4293      	cmp	r3, r2
   d60f8:	d002      	beq.n	d6100 <memset+0xe>
   d60fa:	f803 1b01 	strb.w	r1, [r3], #1
   d60fe:	e7fa      	b.n	d60f6 <memset+0x4>
   d6100:	4770      	bx	lr
	...

000d6104 <srand>:
   d6104:	b538      	push	{r3, r4, r5, lr}
   d6106:	4b12      	ldr	r3, [pc, #72]	; (d6150 <srand+0x4c>)
   d6108:	681c      	ldr	r4, [r3, #0]
   d610a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d610c:	4605      	mov	r5, r0
   d610e:	b9d3      	cbnz	r3, d6146 <srand+0x42>
   d6110:	2018      	movs	r0, #24
   d6112:	f7fe fc0b 	bl	d492c <malloc>
   d6116:	f243 330e 	movw	r3, #13070	; 0x330e
   d611a:	63a0      	str	r0, [r4, #56]	; 0x38
   d611c:	8003      	strh	r3, [r0, #0]
   d611e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6122:	8043      	strh	r3, [r0, #2]
   d6124:	f241 2334 	movw	r3, #4660	; 0x1234
   d6128:	8083      	strh	r3, [r0, #4]
   d612a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d612e:	80c3      	strh	r3, [r0, #6]
   d6130:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6134:	8103      	strh	r3, [r0, #8]
   d6136:	2305      	movs	r3, #5
   d6138:	8143      	strh	r3, [r0, #10]
   d613a:	230b      	movs	r3, #11
   d613c:	8183      	strh	r3, [r0, #12]
   d613e:	2201      	movs	r2, #1
   d6140:	2300      	movs	r3, #0
   d6142:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6148:	2200      	movs	r2, #0
   d614a:	611d      	str	r5, [r3, #16]
   d614c:	615a      	str	r2, [r3, #20]
   d614e:	bd38      	pop	{r3, r4, r5, pc}
   d6150:	2003e4a0 	.word	0x2003e4a0

000d6154 <strcmp>:
   d6154:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6158:	f811 3b01 	ldrb.w	r3, [r1], #1
   d615c:	2a01      	cmp	r2, #1
   d615e:	bf28      	it	cs
   d6160:	429a      	cmpcs	r2, r3
   d6162:	d0f7      	beq.n	d6154 <strcmp>
   d6164:	1ad0      	subs	r0, r2, r3
   d6166:	4770      	bx	lr

000d6168 <strlen>:
   d6168:	4603      	mov	r3, r0
   d616a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d616e:	2a00      	cmp	r2, #0
   d6170:	d1fb      	bne.n	d616a <strlen+0x2>
   d6172:	1a18      	subs	r0, r3, r0
   d6174:	3801      	subs	r0, #1
   d6176:	4770      	bx	lr

000d6178 <dynalib_user>:
   d6178:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d6188:	0000 0000 657a 6f72 7400 6f77 7000 7361     ....zero.two.pas
   d6198:	7773 6472 3031 0030 414d 5453 5245 4c5f     swrd100.MASTER_L
   d61a8:	5041 4f54 0050 7434 3635 7735 7533 7866     APTOP.4t565w3ufx
   d61b8:	7232 4100 5454 5638 7775 3936 0052 6574     2r.ATT8Vuw69R.te
   d61c8:	706d 7300 6174 0074 6f6d 6564 6d00 646f     mp.stat.mode.mod
   d61d8:	4365 0000                                   eC..

000d61dc <_ZTVN5spark13EthernetClassE>:
	...
   d61e4:	49bb 000d 49b1 000d 49a7 000d 499d 000d     .I...I...I...I..
   d61f4:	4991 000d 4985 000d 4979 000d 4971 000d     .I...I..yI..qI..
   d6204:	4967 000d 495d 000d 53a1 000d               gI..]I...S..

000d6210 <_ZTV8SPIClass>:
	...
   d6218:	49d9 000d 49db 000d 6162 6475 5300 7265     .I...I..baud.Ser
   d6228:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6238:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6248:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6258:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6268:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6278:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6288:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6298:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d62a8:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d62b8:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d62c8:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d62d8:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d62e8:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d62f8:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d6308:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d6318:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d6328:	0065 0000                                   e...

000d632c <_ZTV9IPAddress>:
	...
   d6334:	4db7 000d 4da7 000d 4da9 000d               .M...M...M..

000d6340 <_ZTV9USBSerial>:
	...
   d6348:	4e91 000d 4ee1 000d 4eef 000d 4b4d 000d     .N...N...N..MK..
   d6358:	4ecd 000d 4e93 000d 4ea9 000d 4edb 000d     .N...N...N...N..
   d6368:	4ebf 000d 4e8d 000d                         .N...N..

000d6370 <_ZTV11USARTSerial>:
	...
   d6378:	4f9d 000d 4fed 000d 4ffb 000d 4b4d 000d     .O...O...O..MK..
   d6388:	4fb1 000d 4fd3 000d 4fbf 000d 4fe7 000d     .O...O...O...O..
   d6398:	4f9f 000d 4fa3 000d                         .O...O..

000d63a0 <_ZTV7TwoWire>:
	...
   d63a8:	50d5 000d 511f 000d 50f7 000d 50d7 000d     .P...Q...P...P..
   d63b8:	50ff 000d 5107 000d 510f 000d 5117 000d     .P...Q...Q...Q..

000d63c8 <_ZTVN5spark9MeshClassE>:
	...
   d63d0:	51b7 000d 51ad 000d 51a3 000d 5199 000d     .Q...Q...Q...Q..
   d63e0:	518d 000d 5181 000d 5175 000d 516d 000d     .Q...Q..uQ..mQ..
   d63f0:	5163 000d 5159 000d 53a1 000d               cQ..YQ...S..

000d63fc <_ZTVN5spark9WiFiClassE>:
	...
   d6404:	531b 000d 5311 000d 5307 000d 52bd 000d     .S...S...S...R..
   d6414:	52fb 000d 52ef 000d 52e3 000d 52db 000d     .R...R...R...R..
   d6424:	52d1 000d 52c7 000d 53a1 000d               .R...R...S..

000d6430 <_ZTVN5spark12NetworkClassE>:
	...
   d6438:	5339 000d 5343 000d 534d 000d 5357 000d     9S..CS..MS..WS..
   d6448:	5361 000d 536d 000d 5379 000d 5385 000d     aS..mS..yS...S..
   d6458:	538d 000d 5397 000d 53a1 000d               .S...S...S..

000d6464 <__sf_fake_stdin>:
	...

000d6484 <__sf_fake_stdout>:
	...

000d64a4 <__sf_fake_stderr>:
	...

000d64c4 <link_const_variable_data_end>:
   d64c4:	000d40b7 	.word	0x000d40b7
   d64c8:	000d456d 	.word	0x000d456d
   d64cc:	000d4571 	.word	0x000d4571
   d64d0:	000d49c5 	.word	0x000d49c5
   d64d4:	000d4a19 	.word	0x000d4a19
   d64d8:	000d4b3d 	.word	0x000d4b3d
   d64dc:	000d4bfd 	.word	0x000d4bfd
   d64e0:	000d4c0d 	.word	0x000d4c0d
   d64e4:	000d4c5d 	.word	0x000d4c5d
   d64e8:	000d526d 	.word	0x000d526d
   d64ec:	000d5325 	.word	0x000d5325
   d64f0:	000d546d 	.word	0x000d546d
   d64f4:	000d55b9 	.word	0x000d55b9
   d64f8:	000d564d 	.word	0x000d564d
   d64fc:	000d56d1 	.word	0x000d56d1
   d6500:	000d5795 	.word	0x000d5795
   d6504:	000d5859 	.word	0x000d5859

000d6508 <link_constructors_end>:
	...
